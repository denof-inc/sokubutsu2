import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { NotificationData, Statistics, UrlStatistics } from '../types.js';

// „É¢„ÉÉ„ÇØÈñ¢Êï∞„Çí‰ΩúÊàê
const mockGetMe = jest.fn<() => Promise<any>>();
const mockSendMessage = jest.fn<() => Promise<any>>();

const mockTelegraf = jest.fn(() => ({
  telegram: {
    getMe: mockGetMe,
    sendMessage: mockSendMessage,
  },
}));

// Telegraf„ÅÆ„É¢„ÉÉ„ÇØ
jest.unstable_mockModule('telegraf', () => ({
  Telegraf: mockTelegraf,
}));

// „É¢„ÉÉ„ÇØ„ÅÆÂæå„Åß„Ç§„É≥„Éù„Éº„Éà
const { TelegramNotifier } = await import('../telegram.js');

describe('TelegramNotifier', () => {
  let notifier: InstanceType<typeof TelegramNotifier>;

  beforeEach(() => {
    jest.clearAllMocks();

    // „Éá„Éï„Ç©„É´„Éà„ÅÆ„É¢„ÉÉ„ÇØË®≠ÂÆö
    mockGetMe.mockResolvedValue({
      id: 123456789,
      is_bot: true,
      first_name: 'Test Bot',
      username: 'test_bot',
    });

    mockSendMessage.mockResolvedValue({
      message_id: 1,
      date: Date.now(),
      chat: { id: -123456789, type: 'group' },
      text: 'Test message',
    });

    notifier = new TelegramNotifier('test-token', 'test-chat-id');
  });

  describe('testConnection', () => {
    it('Êé•Á∂öÊàêÂäüÊôÇ„Å´true„ÇíËøî„Åô„Åì„Å®', async () => {
      const result = await notifier.testConnection();

      expect(result).toBe(true);
      expect(mockGetMe).toHaveBeenCalled();
    });

    it('Êé•Á∂öÂ§±ÊïóÊôÇ„Å´false„ÇíËøî„Åô„Åì„Å®', async () => {
      mockGetMe.mockRejectedValue(new Error('Connection failed'));

      const result = await notifier.testConnection();

      expect(result).toBe(false);
      expect(mockGetMe).toHaveBeenCalled();
    });
  });

  describe('sendNewListingNotification', () => {
    it('Êñ∞ÁùÄÁâ©‰ª∂ÈÄöÁü•„ÇíÊ≠£„Åó„ÅèÈÄÅ‰ø°„Åô„Çã„Åì„Å®', async () => {
      const notificationData: NotificationData = {
        currentCount: 15,
        previousCount: 10,
        detectedAt: new Date('2024-01-01T10:00:00'),
        url: 'https://example.com',
        executionTime: 3.5,
      };

      await notifier.sendNewListingNotification(notificationData);

      expect(mockSendMessage).toHaveBeenCalled();
      const calls = mockSendMessage.mock.calls as unknown as Array<[string, string, any]>;
      expect(calls[0]?.[0]).toBe('test-chat-id');
      expect(calls[0]?.[1]).toContain('Êñ∞ÁùÄÁâ©‰ª∂„ÅÇ„Çä');

      const sentMessage = calls[0]?.[1] ?? '';
      expect(sentMessage).not.toContain('+5‰ª∂'); // ‰ª∂Êï∞„ÅØÂâäÈô§„Åï„Çå„Åü„ÅÆ„ÅßÂê´„Åæ„Çå„Å™„ÅÑ
      expect(sentMessage).toContain('https://example.com');
    });

    it('Áâ©‰ª∂Êï∞Ê∏õÂ∞ëÊôÇ„ÇÇÊ≠£„Åó„ÅèÈÄöÁü•„Åô„Çã„Åì„Å®', async () => {
      const notificationData: NotificationData = {
        currentCount: 8,
        previousCount: 10,
        detectedAt: new Date(),
        url: 'https://example.com',
        executionTime: 2.0,
      };

      await notifier.sendNewListingNotification(notificationData);

      const calls = mockSendMessage.mock.calls as unknown as Array<[string, string, any]>;
      const sentMessage = calls[0]?.[1] ?? '';
      expect(sentMessage).not.toContain('2‰ª∂Ê∏õÂ∞ë'); // ‰ª∂Êï∞„ÅØÂâäÈô§„Åï„Çå„Åü„ÅÆ„ÅßÂê´„Åæ„Çå„Å™„ÅÑ
    });
  });

  describe('sendErrorAlert', () => {
    it('„Ç®„É©„Éº„Ç¢„É©„Éº„Éà„ÇíÊ≠£„Åó„ÅèÈÄÅ‰ø°„Åô„Çã„Åì„Å®', async () => {
      const url = 'https://example.com/error';
      const error = 'Network timeout';

      await notifier.sendErrorAlert(url, error);

      expect(mockSendMessage).toHaveBeenCalled();
      const calls = mockSendMessage.mock.calls as unknown as Array<[string, string, any]>;
      expect(calls[0]?.[0]).toBe('test-chat-id');
      expect(calls[0]?.[1]).toContain('Áõ£Ë¶ñ„Ç®„É©„Éº„ÅÆ„ÅäÁü•„Çâ„Åõ');

      const sentMessage = calls[0]?.[1] ?? '';
      expect(sentMessage).toContain('„Ç®„É™„Ç¢Áâ©‰ª∂'); // Áõ£Ë¶ñÂêç„ÅåÂê´„Åæ„Çå„Çã
      expect(sentMessage).toContain('3ÂõûÈÄ£Á∂öÔºà15ÂàÜÈñìÔºâ'); // „Ç®„É©„ÉºÊï∞„ÅÆË°®Á§∫
      expect(sentMessage).toContain('„Çµ„Ç§„Éà„ÅÆÂøúÁ≠î„ÅåÈÅÖ„Åè„Å™„Å£„Å¶„ÅÑ„Åæ„Åô'); // „É¶„Éº„Ç∂„Éº„Éï„É¨„É≥„Éâ„É™„Éº„Å™„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
    });
  });

  describe('sendUrlSummaryReport', () => {
    it('1ÊôÇÈñì„Çµ„Éû„É™„Éº„É¨„Éù„Éº„Éà„ÇíÊ≠£„Åó„ÅèÈÄÅ‰ø°„Åô„Çã„Åì„Å®', async () => {
      const stats: UrlStatistics = {
        url: 'https://www.athome.co.jp/chintai/tokyo/list/',
        totalChecks: 12,
        successCount: 10,
        errorCount: 2,
        successRate: 83.3,
        averageExecutionTime: 3.5,
        hasNewProperty: false,
        newPropertyCount: 0,
        lastNewProperty: null,
        hourlyHistory: [
          { time: '10:00', status: '„Å™„Åó' },
          { time: '10:05', status: '„Å™„Åó' },
          { time: '10:10', status: '„ÅÇ„Çä' },
          { time: '10:15', status: '„Ç®„É©„Éº' },
          { time: '10:20', status: '„Å™„Åó' },
        ]
      };

      await notifier.sendUrlSummaryReport(stats);

      expect(mockSendMessage).toHaveBeenCalled();
      const calls = mockSendMessage.mock.calls as unknown as Array<[string, string, any]>;
      const sentMessage = calls[0]?.[1] ?? '';
      
      expect(sentMessage).toContain('1ÊôÇÈñì„Çµ„Éû„É™„Éº');
      expect(sentMessage).toContain('tokyo');
      expect(sentMessage).toContain('5ÂàÜ„Åî„Å®„ÅÆÁµêÊûú');
      expect(sentMessage).toContain('10:00 ‚úÖ „Å™„Åó');
      expect(sentMessage).toContain('10:10 üÜï „ÅÇ„Çä');
      expect(sentMessage).toContain('10:15 ‚ùå „Ç®„É©„Éº');
      expect(sentMessage).toContain('ÊàêÂäüÁéá: 83.3%');
    });
  });

  describe('sendStatisticsReport', () => {
    it('Áµ±Ë®à„É¨„Éù„Éº„Éà„ÇíÊ≠£„Åó„ÅèÈÄÅ‰ø°„Åô„Çã„Åì„Å®', async () => {
      const stats: Statistics = {
        totalChecks: 100,
        errors: 5,
        newListings: 10,
        lastCheck: new Date('2024-01-01T10:00:00'),
        averageExecutionTime: 2.5,
        successRate: 95,
      };

      await notifier.sendStatisticsReport(stats);

      expect(mockSendMessage).toHaveBeenCalled();
      const calls = mockSendMessage.mock.calls as unknown as Array<[string, string, any]>;
      expect(calls[0]?.[0]).toBe('test-chat-id');
      expect(calls[0]?.[1]).toContain('„ÇΩ„ÇØ„Éñ„ÉÑÁµ±Ë®à„É¨„Éù„Éº„Éà');

      const sentMessage = calls[0]?.[1] ?? '';
      expect(sentMessage).toContain('100Âõû');
      expect(sentMessage).toContain('95%');
      expect(sentMessage).toContain('2.50Áßí');
      expect(sentMessage).toContain('10Âõû');
      expect(sentMessage).toContain('5Âõû');
    });

    it('ÊàêÂäüÁéá„Åå‰Ωé„ÅÑÂ†¥Âêà„Å´Ë≠¶Âëä„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂê´„ÇÄ„Åì„Å®', async () => {
      const stats: Statistics = {
        totalChecks: 100,
        errors: 10,
        newListings: 5,
        lastCheck: new Date(),
        averageExecutionTime: 3.0,
        successRate: 90,
      };

      await notifier.sendStatisticsReport(stats);

      const calls = mockSendMessage.mock.calls as unknown as Array<[string, string, any]>;
      const sentMessage = calls[0]?.[1] ?? '';
      expect(sentMessage).toContain('„Ç®„É©„ÉºÁéá„ÅåÈ´ò„ÇÅ„Åß„Åô');
    });
  });

  describe('„É™„Éà„É©„Ç§Ê©üËÉΩ', () => {
    it('ÈÄÅ‰ø°Â§±ÊïóÊôÇ„Å´„É™„Éà„É©„Ç§„Åô„Çã„Åì„Å®', async () => {
      mockSendMessage
        .mockRejectedValueOnce(new Error('Temporary error'))
        .mockRejectedValueOnce(new Error('Temporary error'))
        .mockResolvedValue({
          message_id: 1,
          date: Date.now(),
          chat: { id: -123456789, type: 'group' },
          text: 'Test message',
        });

      await notifier.sendStartupNotice();

      expect(mockSendMessage).toHaveBeenCalledTimes(3);
    });

    it('ÊúÄÂ§ß„É™„Éà„É©„Ç§ÂõûÊï∞„ÇíË∂Ö„Åà„Å¶„ÇÇ„Ç®„É©„Éº„ÇíÊäï„Åí„Åö„Å´ÁµÇ‰∫Ü„Åô„Çã„Åì„Å®', async () => {
      mockSendMessage.mockRejectedValue(new Error('Permanent error'));

      // „Ç®„É©„Éº„ÇíÊäï„Åí„Åö„Å´Ê≠£Â∏∏ÁµÇ‰∫Ü„Åô„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      await expect(notifier.sendStartupNotice()).resolves.toBeUndefined();
      expect(mockSendMessage).toHaveBeenCalledTimes(4); // ÂàùÂõû + 3Âõû„É™„Éà„É©„Ç§
    });
  });

  describe('getBotInfo', () => {
    it('BotÊÉÖÂ†±„ÇíÊ≠£„Åó„ÅèÂèñÂæó„Åô„Çã„Åì„Å®', async () => {
      const botInfo = await notifier.getBotInfo();

      expect(botInfo).toEqual({
        username: 'test_bot',
        id: 123456789,
      });
      expect(mockGetMe).toHaveBeenCalled();
    });

    it('username„Åå„Å™„ÅÑÂ†¥Âêà„Å´unknown„ÇíËøî„Åô„Åì„Å®', async () => {
      mockGetMe.mockResolvedValue({
        id: 123456789,
        is_bot: true,
        first_name: 'Test Bot',
        username: undefined,
      });

      const botInfo = await notifier.getBotInfo();

      expect(botInfo.username).toBe('unknown');
    });
  });
});
