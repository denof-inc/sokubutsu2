{"file":"/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/domain/telegram/telegram.controller.spec.ts","mappings":"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","names":[],"sources":["/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/domain/telegram/telegram.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { TelegramController } from './telegram.controller';\nimport { AuthService } from '../../core/auth/auth.service';\nimport { TelegramService } from './telegram.service';\nimport { User } from '../users/entities/user.entity';\nimport {\n  TelegramUpdate,\n  TelegramUser,\n} from '../../common/interfaces/telegram-user.interface';\nimport { TelegramWebhookGuard } from '../../common/guards/telegram-webhook.guard';\nimport { TelegramAuthGuard } from '../../common/guards/telegram-auth.guard';\nimport { RateLimitGuard } from '../../common/guards/rate-limit.guard';\n\ndescribe('TelegramController', () => {\n  let controller: TelegramController;\n  let authService: jest.Mocked<AuthService>;\n  let telegramService: jest.Mocked<TelegramService>;\n\n  const mockUser: User = {\n    id: 1,\n    telegramId: '123456789',\n    firstName: 'Test',\n    lastName: 'User',\n    username: 'testuser',\n    isActive: true,\n    languageCode: 'ja',\n    settings: {\n      notifications: { enabled: true, silent: false },\n      language: 'ja',\n    },\n    lastActiveAt: new Date(),\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    fullName: 'Test User',\n    displayName: 'testuser',\n  };\n\n  const mockTelegramUser: TelegramUser = {\n    id: 123456789,\n    is_bot: false,\n    first_name: 'Test',\n    last_name: 'User',\n    username: 'testuser',\n    language_code: 'ja',\n  };\n\n  const mockUpdate: TelegramUpdate = {\n    update_id: 1,\n    message: {\n      message_id: 1,\n      date: Date.now(),\n      chat: {\n        id: 123456789,\n        type: 'private',\n      },\n      from: mockTelegramUser,\n      text: '/start',\n    },\n  };\n\n  beforeEach(async () => {\n    const mockAuthService = {\n      handleStartCommand: jest.fn(),\n    };\n\n    const mockTelegramService = {\n      sendMessage: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [TelegramController],\n      providers: [\n        { provide: AuthService, useValue: mockAuthService },\n        { provide: TelegramService, useValue: mockTelegramService },\n      ],\n    })\n      .overrideGuard(TelegramWebhookGuard)\n      .useValue({ canActivate: () => true })\n      .overrideGuard(TelegramAuthGuard)\n      .useValue({ canActivate: () => true })\n      .overrideGuard(RateLimitGuard)\n      .useValue({ canActivate: () => true })\n      .compile();\n\n    controller = module.get<TelegramController>(TelegramController);\n    authService = module.get(AuthService);\n    telegramService = module.get(TelegramService);\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  describe('handleUpdate', () => {\n    it('should handle /start command', async () => {\n      authService.handleStartCommand.mockResolvedValue({\n        user: mockUser,\n        isNewUser: true,\n        welcomeMessage: 'はじめまして！',\n      });\n\n      const result = await controller.handleUpdate(\n        mockUpdate,\n        mockUser,\n        mockTelegramUser,\n        true,\n      );\n\n      expect(result).toEqual({ ok: true });\n      expect(authService.handleStartCommand).toHaveBeenCalledWith(\n        mockTelegramUser,\n      );\n      expect(telegramService.sendMessage).toHaveBeenCalledWith(\n        123456789,\n        'はじめまして！',\n      );\n    });\n\n    it('should handle /add command without URL', async () => {\n      const update = {\n        ...mockUpdate,\n        message: {\n          ...(mockUpdate.message || {}),\n          text: '/add',\n        },\n      } as TelegramUpdate;\n\n      await controller.handleUpdate(update, mockUser, mockTelegramUser, false);\n\n      expect(telegramService.sendMessage).toHaveBeenCalledWith(\n        123456789,\n        expect.stringContaining('使用方法: /add <URL>'),\n      );\n    });\n\n    it('should handle /add command with invalid URL', async () => {\n      const update = {\n        ...mockUpdate,\n        message: {\n          ...(mockUpdate.message || {}),\n          text: '/add invalid-url',\n        },\n      } as TelegramUpdate;\n\n      await controller.handleUpdate(update, mockUser, mockTelegramUser, false);\n\n      expect(telegramService.sendMessage).toHaveBeenCalledWith(\n        123456789,\n        '有効なURLを入力してください。',\n      );\n    });\n\n    it('should handle /add command with valid URL', async () => {\n      const update = {\n        ...mockUpdate,\n        message: {\n          ...(mockUpdate.message || {}),\n          text: '/add https://example.com',\n        },\n      } as TelegramUpdate;\n\n      await controller.handleUpdate(update, mockUser, mockTelegramUser, false);\n\n      expect(telegramService.sendMessage).toHaveBeenCalledWith(\n        123456789,\n        expect.stringContaining('監視リストに追加しました'),\n      );\n    });\n\n    it('should handle /list command', async () => {\n      const update = {\n        ...mockUpdate,\n        message: {\n          ...(mockUpdate.message || {}),\n          text: '/list',\n        },\n      } as TelegramUpdate;\n\n      await controller.handleUpdate(update, mockUser, mockTelegramUser, false);\n\n      expect(telegramService.sendMessage).toHaveBeenCalledWith(\n        123456789,\n        expect.stringContaining('監視中のURL一覧'),\n      );\n    });\n\n    it('should handle /help command', async () => {\n      const update = {\n        ...mockUpdate,\n        message: {\n          ...(mockUpdate.message || {}),\n          text: '/help',\n        },\n      } as TelegramUpdate;\n\n      await controller.handleUpdate(update, mockUser, mockTelegramUser, false);\n\n      expect(telegramService.sendMessage).toHaveBeenCalledWith(\n        123456789,\n        expect.stringContaining('コマンド一覧'),\n      );\n    });\n\n    it('should handle unknown command', async () => {\n      const update = {\n        ...mockUpdate,\n        message: {\n          ...(mockUpdate.message || {}),\n          text: '/unknown',\n        },\n      } as TelegramUpdate;\n\n      await controller.handleUpdate(update, mockUser, mockTelegramUser, false);\n\n      expect(telegramService.sendMessage).toHaveBeenCalledWith(\n        123456789,\n        '不明なコマンドです。/help でコマンド一覧を確認してください。',\n      );\n    });\n\n    it('should ignore non-text updates', async () => {\n      const update = {\n        ...mockUpdate,\n        message: {\n          ...(mockUpdate.message || {}),\n          text: undefined,\n        },\n      } as TelegramUpdate;\n\n      const result = await controller.handleUpdate(\n        update,\n        mockUser,\n        mockTelegramUser,\n        false,\n      );\n\n      expect(result).toEqual({ ok: true });\n      expect(telegramService.sendMessage).not.toHaveBeenCalled();\n    });\n\n    it('should handle errors gracefully', async () => {\n      authService.handleStartCommand.mockRejectedValue(new Error('Test error'));\n\n      await controller.handleUpdate(\n        mockUpdate,\n        mockUser,\n        mockTelegramUser,\n        true,\n      );\n\n      expect(telegramService.sendMessage).toHaveBeenCalledWith(\n        123456789,\n        'エラーが発生しました。しばらく待ってから再度お試しください。',\n      );\n    });\n\n    it('should handle /status command', async () => {\n      const update = {\n        ...mockUpdate,\n        message: {\n          ...(mockUpdate.message || {}),\n          text: '/status',\n        },\n      } as TelegramUpdate;\n\n      await controller.handleUpdate(update, mockUser, mockTelegramUser, false);\n\n      expect(telegramService.sendMessage).toHaveBeenCalledWith(\n        123456789,\n        expect.stringContaining('監視状況'),\n      );\n    });\n\n    it('should handle /remove command without index', async () => {\n      const update = {\n        ...mockUpdate,\n        message: {\n          ...(mockUpdate.message || {}),\n          text: '/remove',\n        },\n      } as TelegramUpdate;\n\n      await controller.handleUpdate(update, mockUser, mockTelegramUser, false);\n\n      expect(telegramService.sendMessage).toHaveBeenCalledWith(\n        123456789,\n        expect.stringContaining('使用方法: /remove <番号>'),\n      );\n    });\n\n    it('should handle /pause command with valid index', async () => {\n      const update = {\n        ...mockUpdate,\n        message: {\n          ...(mockUpdate.message || {}),\n          text: '/pause 1',\n        },\n      } as TelegramUpdate;\n\n      await controller.handleUpdate(update, mockUser, mockTelegramUser, false);\n\n      expect(telegramService.sendMessage).toHaveBeenCalledWith(\n        123456789,\n        expect.stringContaining('監視を一時停止しました'),\n      );\n    });\n\n    it('should handle /resume command with invalid index', async () => {\n      const update = {\n        ...mockUpdate,\n        message: {\n          ...(mockUpdate.message || {}),\n          text: '/resume abc',\n        },\n      } as TelegramUpdate;\n\n      await controller.handleUpdate(update, mockUser, mockTelegramUser, false);\n\n      expect(telegramService.sendMessage).toHaveBeenCalledWith(\n        123456789,\n        '番号を正しく入力してください。',\n      );\n    });\n  });\n});\n"],"version":3}