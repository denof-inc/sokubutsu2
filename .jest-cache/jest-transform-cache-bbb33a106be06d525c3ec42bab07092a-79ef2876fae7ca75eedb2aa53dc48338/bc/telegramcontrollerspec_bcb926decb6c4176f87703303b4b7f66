d8842fd5c0ebd698f123b25becf971ec
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const telegram_controller_1 = require("./telegram.controller");
const auth_service_1 = require("../../core/auth/auth.service");
const telegram_service_1 = require("./telegram.service");
const telegram_webhook_guard_1 = require("../../common/guards/telegram-webhook.guard");
const telegram_auth_guard_1 = require("../../common/guards/telegram-auth.guard");
const rate_limit_guard_1 = require("../../common/guards/rate-limit.guard");
describe('TelegramController', () => {
    let controller;
    let authService;
    let telegramService;
    const mockUser = {
        id: 1,
        telegramId: '123456789',
        firstName: 'Test',
        lastName: 'User',
        username: 'testuser',
        isActive: true,
        languageCode: 'ja',
        settings: {
            notifications: { enabled: true, silent: false },
            language: 'ja',
        },
        lastActiveAt: new Date(),
        createdAt: new Date(),
        updatedAt: new Date(),
        fullName: 'Test User',
        displayName: 'testuser',
    };
    const mockTelegramUser = {
        id: 123456789,
        is_bot: false,
        first_name: 'Test',
        last_name: 'User',
        username: 'testuser',
        language_code: 'ja',
    };
    const mockUpdate = {
        update_id: 1,
        message: {
            message_id: 1,
            date: Date.now(),
            chat: {
                id: 123456789,
                type: 'private',
            },
            from: mockTelegramUser,
            text: '/start',
        },
    };
    beforeEach(async () => {
        const mockAuthService = {
            handleStartCommand: jest.fn(),
        };
        const mockTelegramService = {
            sendMessage: jest.fn(),
        };
        const module = await testing_1.Test.createTestingModule({
            controllers: [telegram_controller_1.TelegramController],
            providers: [
                { provide: auth_service_1.AuthService, useValue: mockAuthService },
                { provide: telegram_service_1.TelegramService, useValue: mockTelegramService },
            ],
        })
            .overrideGuard(telegram_webhook_guard_1.TelegramWebhookGuard)
            .useValue({ canActivate: () => true })
            .overrideGuard(telegram_auth_guard_1.TelegramAuthGuard)
            .useValue({ canActivate: () => true })
            .overrideGuard(rate_limit_guard_1.RateLimitGuard)
            .useValue({ canActivate: () => true })
            .compile();
        controller = module.get(telegram_controller_1.TelegramController);
        authService = module.get(auth_service_1.AuthService);
        telegramService = module.get(telegram_service_1.TelegramService);
    });
    it('should be defined', () => {
        expect(controller).toBeDefined();
    });
    describe('handleUpdate', () => {
        it('should handle /start command', async () => {
            authService.handleStartCommand.mockResolvedValue({
                user: mockUser,
                isNewUser: true,
                welcomeMessage: 'はじめまして！',
            });
            const result = await controller.handleUpdate(mockUpdate, mockUser, mockTelegramUser, true);
            expect(result).toEqual({ ok: true });
            expect(authService.handleStartCommand).toHaveBeenCalledWith(mockTelegramUser);
            expect(telegramService.sendMessage).toHaveBeenCalledWith(123456789, 'はじめまして！');
        });
        it('should handle /add command without URL', async () => {
            const update = {
                ...mockUpdate,
                message: {
                    ...(mockUpdate.message || {}),
                    text: '/add',
                },
            };
            await controller.handleUpdate(update, mockUser, mockTelegramUser, false);
            expect(telegramService.sendMessage).toHaveBeenCalledWith(123456789, expect.stringContaining('使用方法: /add <URL>'));
        });
        it('should handle /add command with invalid URL', async () => {
            const update = {
                ...mockUpdate,
                message: {
                    ...(mockUpdate.message || {}),
                    text: '/add invalid-url',
                },
            };
            await controller.handleUpdate(update, mockUser, mockTelegramUser, false);
            expect(telegramService.sendMessage).toHaveBeenCalledWith(123456789, '有効なURLを入力してください。');
        });
        it('should handle /add command with valid URL', async () => {
            const update = {
                ...mockUpdate,
                message: {
                    ...(mockUpdate.message || {}),
                    text: '/add https://example.com',
                },
            };
            await controller.handleUpdate(update, mockUser, mockTelegramUser, false);
            expect(telegramService.sendMessage).toHaveBeenCalledWith(123456789, expect.stringContaining('監視リストに追加しました'));
        });
        it('should handle /list command', async () => {
            const update = {
                ...mockUpdate,
                message: {
                    ...(mockUpdate.message || {}),
                    text: '/list',
                },
            };
            await controller.handleUpdate(update, mockUser, mockTelegramUser, false);
            expect(telegramService.sendMessage).toHaveBeenCalledWith(123456789, expect.stringContaining('監視中のURL一覧'));
        });
        it('should handle /help command', async () => {
            const update = {
                ...mockUpdate,
                message: {
                    ...(mockUpdate.message || {}),
                    text: '/help',
                },
            };
            await controller.handleUpdate(update, mockUser, mockTelegramUser, false);
            expect(telegramService.sendMessage).toHaveBeenCalledWith(123456789, expect.stringContaining('コマンド一覧'));
        });
        it('should handle unknown command', async () => {
            const update = {
                ...mockUpdate,
                message: {
                    ...(mockUpdate.message || {}),
                    text: '/unknown',
                },
            };
            await controller.handleUpdate(update, mockUser, mockTelegramUser, false);
            expect(telegramService.sendMessage).toHaveBeenCalledWith(123456789, '不明なコマンドです。/help でコマンド一覧を確認してください。');
        });
        it('should ignore non-text updates', async () => {
            const update = {
                ...mockUpdate,
                message: {
                    ...(mockUpdate.message || {}),
                    text: undefined,
                },
            };
            const result = await controller.handleUpdate(update, mockUser, mockTelegramUser, false);
            expect(result).toEqual({ ok: true });
            expect(telegramService.sendMessage).not.toHaveBeenCalled();
        });
        it('should handle errors gracefully', async () => {
            authService.handleStartCommand.mockRejectedValue(new Error('Test error'));
            await controller.handleUpdate(mockUpdate, mockUser, mockTelegramUser, true);
            expect(telegramService.sendMessage).toHaveBeenCalledWith(123456789, 'エラーが発生しました。しばらく待ってから再度お試しください。');
        });
        it('should handle /status command', async () => {
            const update = {
                ...mockUpdate,
                message: {
                    ...(mockUpdate.message || {}),
                    text: '/status',
                },
            };
            await controller.handleUpdate(update, mockUser, mockTelegramUser, false);
            expect(telegramService.sendMessage).toHaveBeenCalledWith(123456789, expect.stringContaining('監視状況'));
        });
        it('should handle /remove command without index', async () => {
            const update = {
                ...mockUpdate,
                message: {
                    ...(mockUpdate.message || {}),
                    text: '/remove',
                },
            };
            await controller.handleUpdate(update, mockUser, mockTelegramUser, false);
            expect(telegramService.sendMessage).toHaveBeenCalledWith(123456789, expect.stringContaining('使用方法: /remove <番号>'));
        });
        it('should handle /pause command with valid index', async () => {
            const update = {
                ...mockUpdate,
                message: {
                    ...(mockUpdate.message || {}),
                    text: '/pause 1',
                },
            };
            await controller.handleUpdate(update, mockUser, mockTelegramUser, false);
            expect(telegramService.sendMessage).toHaveBeenCalledWith(123456789, expect.stringContaining('監視を一時停止しました'));
        });
        it('should handle /resume command with invalid index', async () => {
            const update = {
                ...mockUpdate,
                message: {
                    ...(mockUpdate.message || {}),
                    text: '/resume abc',
                },
            };
            await controller.handleUpdate(update, mockUser, mockTelegramUser, false);
            expect(telegramService.sendMessage).toHaveBeenCalledWith(123456789, '番号を正しく入力してください。');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,