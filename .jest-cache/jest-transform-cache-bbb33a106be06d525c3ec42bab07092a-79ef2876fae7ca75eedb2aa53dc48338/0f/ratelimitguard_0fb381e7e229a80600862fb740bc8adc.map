{"file":"/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/common/guards/rate-limit.guard.ts","mappings":";;;;;;;;;;;;;AAAA,2CAOwB;AACxB,uCAAyC;AAQlC,IAAM,cAAc,sBAApB,MAAM,cAAc;IAII;IAHZ,MAAM,GAAG,IAAI,eAAM,CAAC,gBAAc,CAAC,IAAI,CAAC,CAAC;IACzC,QAAQ,GAAG,IAAI,GAAG,EAAyB,CAAC;IAE7D,YAA6B,SAAoB;QAApB,cAAS,GAAT,SAAS,CAAW;IAAG,CAAC;IAErD,WAAW,CAAC,OAAyB;QACnC,MAAM,OAAO,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,UAAU,EAAE,CAAC;QACpD,MAAM,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;QAE1C,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,OAAO,IAAI,CAAC,CAAC,WAAW;QAC1B,CAAC;QAED,MAAM,MAAM,GAAG,YAAY,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;QAC1C,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,MAAM,QAAQ,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,KAAK;QACjC,MAAM,WAAW,GAAG,EAAE,CAAC,CAAC,cAAc;QAEtC,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAE/C,IAAI,CAAC,YAAY,IAAI,GAAG,GAAG,YAAY,CAAC,SAAS,EAAE,CAAC;YAClD,WAAW;YACX,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE;gBACxB,KAAK,EAAE,CAAC;gBACR,SAAS,EAAE,GAAG,GAAG,QAAQ;aAC1B,CAAC,CAAC;YACH,OAAO,IAAI,CAAC;QACd,CAAC;QAED,IAAI,YAAY,CAAC,KAAK,IAAI,WAAW,EAAE,CAAC;YACtC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gCAAgC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACnE,MAAM,IAAI,sBAAa,CACrB,mBAAmB,EACnB,mBAAU,CAAC,iBAAiB,CAC7B,CAAC;QACJ,CAAC;QAED,YAAY,CAAC,KAAK,EAAE,CAAC;QACrB,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAA;AAzCY,wCAAc;yBAAd,cAAc;IAD1B,IAAA,mBAAU,GAAE;qCAK6B,gBAAS;GAJtC,cAAc,CAyC1B","names":[],"sources":["/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/common/guards/rate-limit.guard.ts"],"sourcesContent":["import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\ninterface RateLimitInfo {\n  count: number;\n  resetTime: number;\n}\n\n@Injectable()\nexport class RateLimitGuard implements CanActivate {\n  private readonly logger = new Logger(RateLimitGuard.name);\n  private readonly requests = new Map<string, RateLimitInfo>();\n\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    const telegramUser = request.telegramUser;\n\n    if (!telegramUser) {\n      return true; // 認証前はスキップ\n    }\n\n    const userId = telegramUser.id.toString();\n    const now = Date.now();\n    const windowMs = 60 * 1000; // 1分\n    const maxRequests = 30; // 1分間に30リクエスト\n\n    const userRequests = this.requests.get(userId);\n\n    if (!userRequests || now > userRequests.resetTime) {\n      // 新しいウィンドウ\n      this.requests.set(userId, {\n        count: 1,\n        resetTime: now + windowMs,\n      });\n      return true;\n    }\n\n    if (userRequests.count >= maxRequests) {\n      this.logger.warn(`Rate limit exceeded for user ${String(userId)}`);\n      throw new HttpException(\n        'Too Many Requests',\n        HttpStatus.TOO_MANY_REQUESTS,\n      );\n    }\n\n    userRequests.count++;\n    return true;\n  }\n}\n"],"version":3}