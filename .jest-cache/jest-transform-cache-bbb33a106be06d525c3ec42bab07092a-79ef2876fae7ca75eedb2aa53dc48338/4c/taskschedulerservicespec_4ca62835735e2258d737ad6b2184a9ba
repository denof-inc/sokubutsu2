c0d7c7104cd4f2898a07c14f53e0593b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const task_scheduler_service_1 = require("./task-scheduler.service");
const url_service_1 = require("../../domain/url/url.service");
const scraping_service_1 = require("../scraping/scraping.service");
const notification_service_1 = require("../notification/notification.service");
describe('TaskSchedulerService', () => {
    let service;
    const mockUrlService = {
        findAllActive: jest.fn().mockResolvedValue([]),
        updateHash: jest.fn(),
    };
    const mockScrapingService = {
        scrapeAndGetHash: jest.fn().mockResolvedValue('mocked-hash'),
    };
    const mockNotificationService = {
        sendNotification: jest.fn(),
        notifyUrlChanged: jest.fn(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                task_scheduler_service_1.TaskSchedulerService,
                {
                    provide: url_service_1.UrlService,
                    useValue: mockUrlService,
                },
                {
                    provide: scraping_service_1.ScrapingService,
                    useValue: mockScrapingService,
                },
                {
                    provide: notification_service_1.NotificationService,
                    useValue: mockNotificationService,
                },
            ],
        }).compile();
        service = module.get(task_scheduler_service_1.TaskSchedulerService);
        // クリーンアップ
        jest.clearAllMocks();
    });
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3R0dGVsYS9Eb2N1bWVudHMvV29yay9kZW5vZi93b3Jrcy8yNTA1Mjlzb2t1YnV0c3UvZGV2Mi9zcmMvZmVhdHVyZXMvdGFzay1zY2hlZHVsZXIvdGFzay1zY2hlZHVsZXIuc2VydmljZS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQXNEO0FBQ3RELHFFQUFnRTtBQUNoRSw4REFBMEQ7QUFDMUQsbUVBQStEO0FBQy9ELCtFQUEyRTtBQUUzRSxRQUFRLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO0lBQ3BDLElBQUksT0FBNkIsQ0FBQztJQUVsQyxNQUFNLGNBQWMsR0FBRztRQUNyQixhQUFhLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztRQUM5QyxVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUN0QixDQUFDO0lBRUYsTUFBTSxtQkFBbUIsR0FBRztRQUMxQixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDO0tBQzdELENBQUM7SUFFRixNQUFNLHVCQUF1QixHQUFHO1FBQzlCLGdCQUFnQixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDM0IsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUM1QixDQUFDO0lBRUYsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLE1BQU0sTUFBTSxHQUFrQixNQUFNLGNBQUksQ0FBQyxtQkFBbUIsQ0FBQztZQUMzRCxTQUFTLEVBQUU7Z0JBQ1QsNkNBQW9CO2dCQUNwQjtvQkFDRSxPQUFPLEVBQUUsd0JBQVU7b0JBQ25CLFFBQVEsRUFBRSxjQUFjO2lCQUN6QjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsa0NBQWU7b0JBQ3hCLFFBQVEsRUFBRSxtQkFBbUI7aUJBQzlCO2dCQUNEO29CQUNFLE9BQU8sRUFBRSwwQ0FBbUI7b0JBQzVCLFFBQVEsRUFBRSx1QkFBdUI7aUJBQ2xDO2FBQ0Y7U0FDRixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFYixPQUFPLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBdUIsNkNBQW9CLENBQUMsQ0FBQztRQUVqRSxVQUFVO1FBQ1YsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtRQUMzQixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDaEMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvdHR0ZWxhL0RvY3VtZW50cy9Xb3JrL2Rlbm9mL3dvcmtzLzI1MDUyOXNva3VidXRzdS9kZXYyL3NyYy9mZWF0dXJlcy90YXNrLXNjaGVkdWxlci90YXNrLXNjaGVkdWxlci5zZXJ2aWNlLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdCwgVGVzdGluZ01vZHVsZSB9IGZyb20gJ0BuZXN0anMvdGVzdGluZyc7XG5pbXBvcnQgeyBUYXNrU2NoZWR1bGVyU2VydmljZSB9IGZyb20gJy4vdGFzay1zY2hlZHVsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBVcmxTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vZG9tYWluL3VybC91cmwuc2VydmljZSc7XG5pbXBvcnQgeyBTY3JhcGluZ1NlcnZpY2UgfSBmcm9tICcuLi9zY3JhcGluZy9zY3JhcGluZy5zZXJ2aWNlJztcbmltcG9ydCB7IE5vdGlmaWNhdGlvblNlcnZpY2UgfSBmcm9tICcuLi9ub3RpZmljYXRpb24vbm90aWZpY2F0aW9uLnNlcnZpY2UnO1xuXG5kZXNjcmliZSgnVGFza1NjaGVkdWxlclNlcnZpY2UnLCAoKSA9PiB7XG4gIGxldCBzZXJ2aWNlOiBUYXNrU2NoZWR1bGVyU2VydmljZTtcblxuICBjb25zdCBtb2NrVXJsU2VydmljZSA9IHtcbiAgICBmaW5kQWxsQWN0aXZlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoW10pLFxuICAgIHVwZGF0ZUhhc2g6IGplc3QuZm4oKSxcbiAgfTtcblxuICBjb25zdCBtb2NrU2NyYXBpbmdTZXJ2aWNlID0ge1xuICAgIHNjcmFwZUFuZEdldEhhc2g6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSgnbW9ja2VkLWhhc2gnKSxcbiAgfTtcblxuICBjb25zdCBtb2NrTm90aWZpY2F0aW9uU2VydmljZSA9IHtcbiAgICBzZW5kTm90aWZpY2F0aW9uOiBqZXN0LmZuKCksXG4gICAgbm90aWZ5VXJsQ2hhbmdlZDogamVzdC5mbigpLFxuICB9O1xuXG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vZHVsZTogVGVzdGluZ01vZHVsZSA9IGF3YWl0IFRlc3QuY3JlYXRlVGVzdGluZ01vZHVsZSh7XG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgVGFza1NjaGVkdWxlclNlcnZpY2UsXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBVcmxTZXJ2aWNlLFxuICAgICAgICAgIHVzZVZhbHVlOiBtb2NrVXJsU2VydmljZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IFNjcmFwaW5nU2VydmljZSxcbiAgICAgICAgICB1c2VWYWx1ZTogbW9ja1NjcmFwaW5nU2VydmljZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IE5vdGlmaWNhdGlvblNlcnZpY2UsXG4gICAgICAgICAgdXNlVmFsdWU6IG1vY2tOb3RpZmljYXRpb25TZXJ2aWNlLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KS5jb21waWxlKCk7XG5cbiAgICBzZXJ2aWNlID0gbW9kdWxlLmdldDxUYXNrU2NoZWR1bGVyU2VydmljZT4oVGFza1NjaGVkdWxlclNlcnZpY2UpO1xuICAgIFxuICAgIC8vIOOCr+ODquODvOODs+OCouODg+ODl1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGRlZmluZWQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHNlcnZpY2UpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=