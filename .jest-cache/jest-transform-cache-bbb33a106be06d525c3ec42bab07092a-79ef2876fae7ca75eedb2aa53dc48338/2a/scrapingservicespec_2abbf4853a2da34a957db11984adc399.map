{"file":"/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/features/scraping/scraping.service.spec.ts","mappings":"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","names":[],"sources":["/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/features/scraping/scraping.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { ScrapingService } from './scraping.service';\nimport { BotProtectionService } from '../bot-protection/bot-protection.service';\nimport axios from 'axios';\nimport * as cheerio from 'cheerio';\nimport { JSDOM } from 'jsdom';\nimport { chromium } from 'playwright';\n\njest.mock('axios');\njest.mock('cheerio');\njest.mock('jsdom');\njest.mock('playwright');\n\ndescribe('ScrapingService', () => {\n  let service: ScrapingService;\n  const mockUrl = 'https://example.com';\n  const mockSelector = '#test-selector';\n  const mockContent = '<div>Test Content</div>';\n  const _mockHash = 'mocked-hash';\n\n  const mockBotProtectionService = {\n    detectBot: jest.fn(),\n    bypassProtection: jest.fn(),\n    getAdaptiveDelay: jest.fn().mockReturnValue(100),\n    analyzeBotProtection: jest.fn().mockResolvedValue({\n      isProtected: false,\n      protectionLevel: 'none',\n      methods: [],\n    }),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        ScrapingService,\n        {\n          provide: BotProtectionService,\n          useValue: mockBotProtectionService,\n        },\n      ],\n    }).compile();\n\n    service = module.get<ScrapingService>(ScrapingService);\n\n    // クリーンアップ\n    jest.clearAllMocks();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('scrapeAndGetHash', () => {\n    it('HTTP + Cheerioで成功する場合', async () => {\n      // Axiosのモック\n      (axios.get as jest.Mock).mockResolvedValue({\n        data: '<html><body><div id=\"test-selector\">Test Content</div></body></html>',\n      });\n\n      // Cheerioのモック\n      const mockElement = {\n        html: jest.fn().mockReturnValue(mockContent),\n        length: 1,\n      };\n      const mockCheerio = {\n        load: jest.fn().mockReturnValue(jest.fn().mockReturnValue(mockElement)),\n      };\n      (cheerio as any).load = mockCheerio.load;\n\n      const result = await service.scrapeAndGetHash(mockUrl, mockSelector);\n\n      expect(result).toBeDefined();\n      expect(axios.get).toHaveBeenCalledWith(\n        mockUrl,\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            'User-Agent': expect.any(String),\n          }),\n        }),\n      );\n    });\n\n    it('HTTP失敗時はJSDOMにフォールバック', async () => {\n      // Axiosを失敗させる\n      (axios.get as jest.Mock).mockRejectedValue(new Error('Network error'));\n\n      // JSDOMのモック\n      const mockElement = { innerHTML: mockContent };\n      const mockDocument = {\n        querySelector: jest.fn().mockReturnValue(mockElement),\n      };\n      const mockWindow = { document: mockDocument, close: jest.fn() };\n      (JSDOM.fromURL as jest.Mock).mockResolvedValue({ window: mockWindow });\n\n      const result = await service.scrapeAndGetHash(mockUrl, mockSelector);\n\n      expect(result).toBeDefined();\n      expect(JSDOM.fromURL).toHaveBeenCalled();\n    });\n\n    it('すべての手法が失敗した場合はnullを返す', async () => {\n      // すべて失敗させる\n      (axios.get as jest.Mock).mockRejectedValue(new Error('HTTP failed'));\n      (JSDOM.fromURL as jest.Mock).mockRejectedValue(new Error('JSDOM failed'));\n\n      const mockBrowser = {\n        newPage: jest.fn().mockRejectedValue(new Error('Playwright failed')),\n        close: jest.fn(),\n      };\n      (chromium.launch as jest.Mock).mockResolvedValue(mockBrowser);\n\n      const result = await service.scrapeAndGetHash(mockUrl, mockSelector);\n\n      expect(result).toBeNull();\n    });\n  });\n});\n"],"version":3}