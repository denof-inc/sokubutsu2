{"file":"/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/features/bot-protection/bot-protection.service.spec.ts","mappings":"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","names":[],"sources":["/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/features/bot-protection/bot-protection.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { BotProtectionService } from './bot-protection.service';\nimport { chromium } from 'playwright';\n\njest.mock('playwright');\n\ndescribe('BotProtectionService', () => {\n  let service: BotProtectionService;\n  let mockBrowser: any;\n  let mockContext: any;\n  let mockPage: any;\n\n  beforeEach(async () => {\n    // Playwrightのモック設定\n    mockPage = {\n      goto: jest.fn().mockResolvedValue(undefined),\n      waitForSelector: jest.fn().mockResolvedValue(undefined),\n      locator: jest.fn().mockReturnValue({\n        click: jest.fn().mockResolvedValue(undefined),\n        type: jest.fn().mockResolvedValue(undefined),\n        first: jest.fn().mockReturnValue({\n          isVisible: jest.fn().mockResolvedValue(true),\n          click: jest.fn().mockResolvedValue(undefined),\n        }),\n      }),\n      keyboard: {\n        press: jest.fn().mockResolvedValue(undefined),\n      },\n      waitForLoadState: jest.fn().mockResolvedValue(undefined),\n      close: jest.fn().mockResolvedValue(undefined),\n    };\n\n    mockContext = {\n      newPage: jest.fn().mockResolvedValue(mockPage),\n      cookies: jest.fn().mockResolvedValue([]),\n      addCookies: jest.fn().mockResolvedValue(undefined),\n      close: jest.fn().mockResolvedValue(undefined),\n    };\n\n    mockBrowser = {\n      newContext: jest.fn().mockResolvedValue(mockContext),\n      close: jest.fn().mockResolvedValue(undefined),\n    };\n\n    (chromium.launch as jest.Mock).mockResolvedValue(mockBrowser);\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [BotProtectionService],\n    }).compile();\n\n    service = module.get<BotProtectionService>(BotProtectionService);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('getOrCreateSession', () => {\n    it('新しいセッションを作成すること', async () => {\n      const domain = 'example.com';\n      const context = await service.getOrCreateSession(domain);\n\n      expect(context).toBeDefined();\n      expect(mockBrowser.newContext).toHaveBeenCalled();\n    });\n\n    it('既存のセッションを再利用すること', async () => {\n      const domain = 'example.com';\n\n      // 最初のセッション作成\n      const context1 = await service.getOrCreateSession(domain);\n\n      // 2回目は同じセッションを返す\n      const context2 = await service.getOrCreateSession(domain);\n\n      expect(context1).toBe(context2);\n      expect(mockBrowser.newContext).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('accessViaGoogle', () => {\n    it('Google経由でサイトにアクセスすること', async () => {\n      const targetUrl = 'https://example.com';\n      const searchQuery = 'example site';\n\n      await service.accessViaGoogle(targetUrl, searchQuery);\n\n      expect(mockPage.goto).toHaveBeenCalledWith(\n        'https://www.google.com',\n        expect.any(Object),\n      );\n      expect(mockPage.locator).toHaveBeenCalledWith('input[name=\"q\"]');\n      expect(mockPage.keyboard.press).toHaveBeenCalledWith('Enter');\n    });\n  });\n\n  describe('getAdaptiveDelay', () => {\n    it('エラー時にディレイを増加させること', () => {\n      const domain = 'example.com';\n\n      const delay1 = service.getAdaptiveDelay(domain, false);\n      const delay2 = service.getAdaptiveDelay(domain, true);\n      const delay3 = service.getAdaptiveDelay(domain, true);\n\n      expect(delay2).toBeGreaterThan(delay1);\n      expect(delay3).toBeGreaterThan(delay2);\n    });\n\n    it('成功時にディレイを減少させること', () => {\n      const domain = 'example.com';\n\n      // エラーでディレイを増加\n      service.getAdaptiveDelay(domain, true);\n      const delayAfterError = service.getAdaptiveDelay(domain, false);\n\n      // 時間経過をシミュレート（テスト用に短縮）\n      jest.spyOn(Date, 'now').mockReturnValue(Date.now() + 6 * 60 * 1000);\n\n      const delayAfterSuccess = service.getAdaptiveDelay(domain, false);\n\n      expect(delayAfterSuccess).toBeLessThan(delayAfterError);\n    });\n  });\n\n  describe('Cookie管理', () => {\n    it('Cookieを保存・復元できること', async () => {\n      const domain = 'example.com';\n      const mockCookies = [{ name: 'test', value: 'value', domain }];\n\n      mockContext.cookies.mockResolvedValue(mockCookies);\n\n      await service.getOrCreateSession(domain);\n      await service.saveCookies(domain);\n      await service.restoreCookies(domain);\n\n      expect(mockContext.cookies).toHaveBeenCalled();\n      expect(mockContext.addCookies).toHaveBeenCalledWith(mockCookies);\n    });\n  });\n});\n"],"version":3}