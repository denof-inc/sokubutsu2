{"file":"/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/common/guards/telegram-webhook.guard.ts","mappings":";;;;;;;;;;;;;AAAA,2CAMwB;AACxB,2CAA+C;AAC/C,8DAA8D;AAGvD,IAAM,oBAAoB,4BAA1B,MAAM,oBAAoB;IAGF;IAFZ,MAAM,GAAG,IAAI,eAAM,CAAC,sBAAoB,CAAC,IAAI,CAAC,CAAC;IAEhE,YAA6B,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;IAAG,CAAC;IAE7D,WAAW,CAAC,OAAyB;QACnC,MAAM,OAAO,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,UAAU,EAAE,CAAC;QAEpD,gBAAgB;QAChB,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,aAAa,EAAE,CAAC;YACzD,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAS,uBAAuB,CAAC,CAAC;QAC5E,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;YACzD,OAAO,IAAI,CAAC,CAAC,gBAAgB;QAC/B,CAAC;QAED,MAAM,iBAAiB,GAAG,OAAO,CAAC,OAAO,CACvC,iCAAiC,CACxB,CAAC;QAEZ,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;YACtD,MAAM,IAAI,8BAAqB,CAAC,4BAA4B,CAAC,CAAC;QAChE,CAAC;QAED,IAAI,iBAAiB,KAAK,WAAW,EAAE,CAAC;YACtC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;YAC/C,MAAM,IAAI,8BAAqB,CAAC,4BAA4B,CAAC,CAAC;QAChE,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAA;AAnCY,oDAAoB;+BAApB,oBAAoB;IADhC,IAAA,mBAAU,GAAE;qCAIiC,sBAAa;GAH9C,oBAAoB,CAmChC","names":[],"sources":["/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/common/guards/telegram-webhook.guard.ts"],"sourcesContent":["import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  UnauthorizedException,\n  Logger,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n// import { createHmac } from 'crypto'; // TODO: 将来的にHMAC検証を実装\n\n@Injectable()\nexport class TelegramWebhookGuard implements CanActivate {\n  private readonly logger = new Logger(TelegramWebhookGuard.name);\n\n  constructor(private readonly configService: ConfigService) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n\n    // 開発環境では検証をスキップ\n    if (this.configService.get('NODE_ENV') === 'development') {\n      return true;\n    }\n\n    const secretToken = this.configService.get<string>('TELEGRAM_SECRET_TOKEN');\n    if (!secretToken) {\n      this.logger.warn('Telegram secret token not configured');\n      return true; // 設定されていない場合は通す\n    }\n\n    const telegramSignature = request.headers[\n      'x-telegram-bot-api-secret-token'\n    ] as string;\n\n    if (!telegramSignature) {\n      this.logger.warn('Missing Telegram signature header');\n      throw new UnauthorizedException('Missing Telegram signature');\n    }\n\n    if (telegramSignature !== secretToken) {\n      this.logger.warn('Invalid Telegram signature');\n      throw new UnauthorizedException('Invalid Telegram signature');\n    }\n\n    return true;\n  }\n}\n"],"version":3}