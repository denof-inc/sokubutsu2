03f8cbef2efd10263aaae8f1e116db5d
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var ScrapingService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScrapingService = void 0;
const common_1 = require("@nestjs/common");
const playwright_1 = require("playwright");
const axios_1 = __importDefault(require("axios"));
const cheerio = __importStar(require("cheerio"));
const jsdom_1 = require("jsdom");
const crypto = __importStar(require("crypto"));
const bot_protection_service_1 = require("../bot-protection/bot-protection.service");
const bot_protection_config_1 = require("../../core/config/bot-protection.config");
let ScrapingService = ScrapingService_1 = class ScrapingService {
    botProtectionService;
    logger = new common_1.Logger(ScrapingService_1.name);
    constructor(botProtectionService) {
        this.botProtectionService = botProtectionService;
    }
    async scrapeAndGetHash(url, selector, options = {}) {
        const domain = new URL(url).hostname;
        // Bot検知テストを実行（オプション）
        if (options.testBotDetection) {
            const detectionResult = await this.testBotDetection(url, selector);
            this.logger.log(`Bot detection test for ${domain}:`, detectionResult);
        }
        // リトライ設定
        const retryConfig = {
            maxRetries: 3,
            baseDelay: 1000,
            maxDelay: 30000,
            backoffMultiplier: 2,
        };
        try {
            return await this.scrapeWithRetry(url, selector, options, retryConfig);
        }
        catch (error) {
            this.logger.error(`[${url}] スクレイピング完全失敗: ${error instanceof Error ? error.message : String(error)}`);
            return null;
        }
    }
    async scrapeWithRetry(url, selector, options, config) {
        let lastError;
        for (let attempt = 1; attempt <= config.maxRetries; attempt++) {
            try {
                // Google経由アクセスが必要な場合
                if (options.useGoogleSearch && options.searchQuery) {
                    const success = await this.botProtectionService.accessViaGoogle(url, options.searchQuery);
                    if (success) {
                        const result = await this.scrapeWithPlaywrightSession(url, selector);
                        if (result.hash) {
                            return result.hash;
                        }
                    }
                }
                // 通常の段階的スクレイピング
                const result = await this.scrapeWithStrategy(url, selector);
                if (result.hash) {
                    this.logger.log(`[${url}] スクレイピング成功 (方法: ${result.method})`);
                    return result.hash;
                }
                // エラー分類
                const errorType = this.classifyError(result.error || 'Unknown error');
                // 回復不可能なエラーの場合は即座に失敗
                if (errorType === 'UNRECOVERABLE') {
                    throw new Error(`回復不可能なエラー: ${String(result.error)}`);
                }
                // リトライ可能なエラーの場合は待機後に再試行
                if (attempt < config.maxRetries) {
                    const delay = Math.min(config.baseDelay * Math.pow(config.backoffMultiplier, attempt - 1), config.maxDelay);
                    this.logger.warn(`スクレイピング失敗 (試行 ${String(attempt)}/${String(config.maxRetries)}): ${String(result.error)}. ${String(delay)}ms後に再試行`);
                    await new Promise((resolve) => setTimeout(resolve, delay));
                }
            }
            catch (error) {
                lastError = error;
                if (attempt < config.maxRetries) {
                    const delay = Math.min(config.baseDelay * Math.pow(config.backoffMultiplier, attempt - 1), config.maxDelay);
                    this.logger.warn(`スクレイピング例外 (試行 ${String(attempt)}/${String(config.maxRetries)}): ${error instanceof Error ? error.message : String(error)}. ${String(delay)}ms後に再試行`);
                    await new Promise((resolve) => setTimeout(resolve, delay));
                }
            }
        }
        throw new Error(`全ての再試行が失敗: ${lastError?.message || 'Unknown error'}`);
    }
    async scrapeWithStrategy(url, selector) {
        const domain = new URL(url).hostname;
        // 第1段階: HTTP + Cheerio
        try {
            this.logger.debug(`[${url}] 第1段階: HTTP + Cheerioでスクレイピング`);
            const hash = await this.scrapeWithHttp(url, selector);
            if (hash) {
                // 成功時はレート制限を緩和
                this.botProtectionService.getAdaptiveDelay(domain, false);
                return { hash, method: 'http' };
            }
        }
        catch (error) {
            this.logger.warn(`[${url}] HTTP + Cheerio失敗: ${error instanceof Error ? error.message : String(error)}`);
            // エラー時はレート制限を強化
            this.botProtectionService.getAdaptiveDelay(domain, true);
        }
        // 第2段階: JSDOM
        try {
            this.logger.debug(`[${url}] 第2段階: JSDOMでスクレイピング`);
            const hash = await this.scrapeWithJsdom(url, selector);
            if (hash) {
                this.botProtectionService.getAdaptiveDelay(domain, false);
                return { hash, method: 'jsdom' };
            }
        }
        catch (error) {
            this.logger.warn(`[${url}] JSDOM失敗: ${error instanceof Error ? error.message : String(error)}`);
            this.botProtectionService.getAdaptiveDelay(domain, true);
        }
        // 第3段階: Playwright
        try {
            this.logger.debug(`[${url}] 第3段階: Playwrightでスクレイピング`);
            const hash = await this.scrapeWithPlaywright(url, selector);
            if (hash) {
                this.botProtectionService.getAdaptiveDelay(domain, false);
                return { hash, method: 'playwright' };
            }
        }
        catch (error) {
            this.logger.error(`[${url}] Playwright失敗: ${error instanceof Error ? error.message : String(error)}`);
            this.botProtectionService.getAdaptiveDelay(domain, true);
        }
        return { hash: null, method: 'playwright', error: 'All methods failed' };
    }
    async scrapeWithHttp(url, selector) {
        const userAgent = this.getRandomUserAgent();
        const domain = new URL(url).hostname;
        // 適応的レート制限による遅延
        const delay = this.botProtectionService.getAdaptiveDelay(domain);
        await new Promise((resolve) => setTimeout(resolve, delay));
        const response = await axios_1.default.get(url, {
            headers: {
                'User-Agent': userAgent,
                ...bot_protection_config_1.botProtectionConfig.headers,
            },
            timeout: bot_protection_config_1.botProtectionConfig.timeouts.http,
        });
        const $ = cheerio.load(response.data);
        const element = $(selector);
        if (!element.length) {
            throw new Error(`セレクタ "${selector}" が見つかりませんでした`);
        }
        const content = element.html();
        if (!content) {
            throw new Error('コンテンツが空です');
        }
        return crypto.createHash('sha256').update(content).digest('hex');
    }
    async scrapeWithJsdom(url, selector) {
        const userAgent = this.getRandomUserAgent();
        const domain = new URL(url).hostname;
        // 適応的レート制限による遅延
        const delay = this.botProtectionService.getAdaptiveDelay(domain);
        await new Promise((resolve) => setTimeout(resolve, delay));
        const dom = await jsdom_1.JSDOM.fromURL(url, {
            userAgent,
            runScripts: 'dangerously',
            resources: 'usable',
            pretendToBeVisual: true,
        });
        // JavaScriptの実行を少し待つ
        await new Promise((resolve) => setTimeout(resolve, 2000));
        const element = dom.window.document.querySelector(selector);
        if (!element) {
            throw new Error(`セレクタ "${selector}" が見つかりませんでした`);
        }
        const content = element.innerHTML;
        if (!content) {
            throw new Error('コンテンツが空です');
        }
        dom.window.close();
        return crypto.createHash('sha256').update(content).digest('hex');
    }
    async scrapeWithPlaywright(url, selector) {
        let browser = null;
        const domain = new URL(url).hostname;
        try {
            // 適応的レート制限による遅延
            const delay = this.botProtectionService.getAdaptiveDelay(domain);
            await new Promise((resolve) => setTimeout(resolve, delay));
            browser = await playwright_1.chromium.launch({
                headless: true,
                args: bot_protection_config_1.botProtectionConfig.playwrightOptions.args,
            });
            const page = await browser.newPage({
                userAgent: this.getRandomUserAgent(),
            });
            // Bot検知回避のための設定
            await page.setExtraHTTPHeaders({
                'Accept-Language': 'ja,en-US;q=0.9,en;q=0.8',
            });
            await page.goto(url, {
                waitUntil: 'domcontentloaded',
                timeout: 30000,
            });
            await page.waitForSelector(selector, { timeout: 30000 });
            const element = await page.$(selector);
            if (!element) {
                throw new Error(`セレクタ "${selector}" が見つかりませんでした`);
            }
            const content = await element.innerHTML();
            if (!content) {
                throw new Error('コンテンツが空です');
            }
            return crypto.createHash('sha256').update(content).digest('hex');
        }
        finally {
            if (browser) {
                await browser.close();
            }
        }
    }
    async randomDelay(min, max) {
        const delay = Math.floor(Math.random() * (max - min + 1)) + min;
        await new Promise((resolve) => setTimeout(resolve, delay));
    }
    /**
     * Bot検知テストを実行
     */
    async testBotDetection(url, selector) {
        const results = {
            httpAccessible: false,
            jsdomAccessible: false,
            playwrightAccessible: false,
        };
        // HTTP テスト
        try {
            await this.scrapeWithHttp(url, selector);
            results.httpAccessible = true;
        }
        catch (error) {
            this.logger.debug(`HTTP test failed: ${error instanceof Error ? error.message : String(error)}`);
        }
        // JSDOM テスト
        try {
            await this.scrapeWithJsdom(url, selector);
            results.jsdomAccessible = true;
        }
        catch (error) {
            this.logger.debug(`JSDOM test failed: ${error instanceof Error ? error.message : String(error)}`);
        }
        // Playwright テスト
        try {
            await this.scrapeWithPlaywright(url, selector);
            results.playwrightAccessible = true;
        }
        catch (error) {
            this.logger.debug(`Playwright test failed: ${error instanceof Error ? error.message : String(error)}`);
        }
        return results;
    }
    /**
     * セッション管理されたPlaywrightでスクレイピング
     */
    async scrapeWithPlaywrightSession(url, selector) {
        const domain = new URL(url).hostname;
        try {
            const context = await this.botProtectionService.getOrCreateSession(domain);
            const page = await context.newPage();
            try {
                // Cookieを復元
                await this.botProtectionService.restoreCookies(domain);
                await page.goto(url, {
                    waitUntil: 'domcontentloaded',
                    timeout: 30000,
                });
                await page.waitForSelector(selector, { timeout: 30000 });
                const element = await page.$(selector);
                if (!element) {
                    throw new Error(`セレクタ "${selector}" が見つかりませんでした`);
                }
                const content = await element.innerHTML();
                if (!content) {
                    throw new Error('コンテンツが空です');
                }
                // Cookieを保存
                await this.botProtectionService.saveCookies(domain);
                const hash = crypto.createHash('sha256').update(content).digest('hex');
                return { hash, method: 'google-playwright' };
            }
            finally {
                await page.close();
            }
        }
        catch (error) {
            this.logger.error(`Session-based Playwright失敗: ${error instanceof Error ? error.message : String(error)}`);
            return {
                hash: null,
                method: 'google-playwright',
                error: error instanceof Error ? error.message : String(error),
            };
        }
    }
    getRandomUserAgent() {
        return bot_protection_config_1.botProtectionConfig.userAgents[Math.floor(Math.random() * bot_protection_config_1.botProtectionConfig.userAgents.length)];
    }
    classifyError(error) {
        // 405 Method Not Allowed - Bot対策の可能性が高い
        if (error.includes('405') || error.includes('Method Not Allowed')) {
            return 'BOT_DETECTED';
        }
        // タイムアウト系エラー - 一時的な問題の可能性
        if (error.includes('timeout') || error.includes('Timeout')) {
            return 'RECOVERABLE';
        }
        // ネットワーク系エラー - 一時的な問題の可能性
        if (error.includes('ECONNRESET') || error.includes('ENOTFOUND')) {
            return 'RECOVERABLE';
        }
        // セレクタ待機失敗 - サイト構造変更の可能性
        if (error.includes('waiting for selector') ||
            error.includes('が見つかりませんでした')) {
            return 'UNRECOVERABLE';
        }
        // その他のエラー - 回復可能として扱う
        return 'RECOVERABLE';
    }
};
exports.ScrapingService = ScrapingService;
exports.ScrapingService = ScrapingService = ScrapingService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [bot_protection_service_1.BotProtectionService])
], ScrapingService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,