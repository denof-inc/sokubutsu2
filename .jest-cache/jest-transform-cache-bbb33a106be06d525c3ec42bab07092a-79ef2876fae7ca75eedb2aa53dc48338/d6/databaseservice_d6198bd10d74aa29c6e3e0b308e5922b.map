{"file":"/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/core/database/database.service.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAKwB;AACxB,oEAAsC;AACtC,uCAAyB;AACzB,2CAA6B;AAGtB,IAAM,eAAe,uBAArB,MAAM,eAAe;IACT,MAAM,GAAG,IAAI,eAAM,CAAC,iBAAe,CAAC,IAAI,CAAC,CAAC;IACnD,EAAE,CAAoB;IAE9B,YAAY;QACV,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,kBAAkB,CAAC,CAAC;QAC5D,IAAI,CAAC,EAAE,GAAG,IAAI,wBAAQ,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;QAErC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAC;QACjE,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAED,eAAe;QACb,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC;QAChB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;IACjD,CAAC;IAEO,kBAAkB;QACxB,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;QACtD,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,EAAE,CAAC,YAAY,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YACnD,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACrB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;QAClD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uCAAuC,EAAE,KAAK,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IAED,KAAK,CAAU,GAAW,EAAE,SAAgB,EAAE;QAC5C,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAClC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAQ,CAAC;IACpC,CAAC;IAED,OAAO,CAAC,GAAW,EAAE,SAAgB,EAAE;QACrC,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAClC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;IAC7B,CAAC;IAED,OAAO,CAAC,GAAW,EAAE,SAAgB,EAAE;QACrC,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAClC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;IAC7B,CAAC;IAED,WAAW,CAAI,EAAW;QACxB,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QAC5C,OAAO,WAAW,EAAE,CAAC;IACvB,CAAC;CACF,CAAA;AAhDY,0CAAe;0BAAf,eAAe;IAD3B,IAAA,mBAAU,GAAE;GACA,eAAe,CAgD3B","names":[],"sources":["/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/core/database/database.service.ts"],"sourcesContent":["import {\n  Injectable,\n  OnModuleInit,\n  OnModuleDestroy,\n  Logger,\n} from '@nestjs/common';\nimport Database from 'better-sqlite3';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n@Injectable()\nexport class DatabaseService implements OnModuleInit, OnModuleDestroy {\n  private readonly logger = new Logger(DatabaseService.name);\n  private db: Database.Database;\n\n  onModuleInit() {\n    const dbPath = path.join(process.cwd(), 'sokubutsu.sqlite');\n    this.db = new Database(dbPath);\n    this.db.pragma('journal_mode = WAL');\n\n    this.logger.log('Database connection successfully established.');\n    this.initializeDatabase();\n  }\n\n  onModuleDestroy() {\n    this.db.close();\n    this.logger.log('Database connection closed.');\n  }\n\n  private initializeDatabase() {\n    const schemaPath = path.join(__dirname, 'schema.sql');\n    try {\n      const schema = fs.readFileSync(schemaPath, 'utf8');\n      this.db.exec(schema);\n      this.logger.log('Database schema initialized.');\n    } catch (error) {\n      this.logger.error('Failed to initialize database schema:', error);\n    }\n  }\n\n  query<T = any>(sql: string, params: any[] = []): T[] {\n    const stmt = this.db.prepare(sql);\n    return stmt.all(...params) as T[];\n  }\n\n  findOne(sql: string, params: any[] = []): any {\n    const stmt = this.db.prepare(sql);\n    return stmt.get(...params);\n  }\n\n  execute(sql: string, params: any[] = []): Database.RunResult {\n    const stmt = this.db.prepare(sql);\n    return stmt.run(...params);\n  }\n\n  transaction<T>(fn: () => T): T {\n    const transaction = this.db.transaction(fn);\n    return transaction();\n  }\n}\n"],"version":3}