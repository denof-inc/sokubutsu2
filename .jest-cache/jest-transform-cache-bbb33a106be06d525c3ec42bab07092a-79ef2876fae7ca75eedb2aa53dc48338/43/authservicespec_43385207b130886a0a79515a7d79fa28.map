{"file":"/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/core/auth/auth.service.spec.ts","mappings":"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","names":[],"sources":["/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/core/auth/auth.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { AuthService } from './auth.service';\nimport { UsersService } from '../../domain/users/users.service';\nimport { TelegramUser } from '../../common/interfaces/telegram-user.interface';\nimport { User } from '../../domain/users/entities/user.entity';\nimport { InvalidTelegramDataException } from '../../common/exceptions/auth.exceptions';\n\ndescribe('AuthService', () => {\n  let service: AuthService;\n  let usersService: jest.Mocked<UsersService>;\n\n  const mockTelegramUser: TelegramUser = {\n    id: 123456789,\n    is_bot: false,\n    first_name: 'Test',\n    last_name: 'User',\n    username: 'testuser',\n    language_code: 'ja',\n  };\n\n  const mockUser: User = {\n    id: 1,\n    telegramId: '123456789',\n    firstName: 'Test',\n    lastName: 'User',\n    username: 'testuser',\n    isActive: true,\n    languageCode: 'ja',\n    settings: {\n      notifications: { enabled: true, silent: false },\n      language: 'ja',\n    },\n    lastActiveAt: new Date(),\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    fullName: 'Test User',\n    displayName: 'testuser',\n  };\n\n  beforeEach(async () => {\n    const mockUsersService = {\n      findByTelegramId: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      exists: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        AuthService,\n        { provide: UsersService, useValue: mockUsersService },\n      ],\n    }).compile();\n\n    service = module.get<AuthService>(AuthService);\n    usersService = module.get(UsersService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('authenticateTelegramUser', () => {\n    it('should create new user when user does not exist', async () => {\n      usersService.findByTelegramId.mockResolvedValue(null);\n      usersService.create.mockResolvedValue(mockUser);\n\n      const result = await service.authenticateTelegramUser(mockTelegramUser);\n\n      expect(result).toEqual(mockUser);\n      expect(usersService.findByTelegramId).toHaveBeenCalledWith('123456789');\n      expect(usersService.create).toHaveBeenCalled();\n    });\n\n    it('should update existing user', async () => {\n      usersService.findByTelegramId.mockResolvedValue(mockUser);\n      usersService.update.mockResolvedValue(mockUser);\n\n      const result = await service.authenticateTelegramUser(mockTelegramUser);\n\n      expect(result).toEqual(mockUser);\n      expect(usersService.update).toHaveBeenCalled();\n    });\n\n    it('should throw error for invalid telegram user data', async () => {\n      const invalidUser = { ...mockTelegramUser, first_name: '' };\n\n      await expect(\n        service.authenticateTelegramUser(invalidUser),\n      ).rejects.toThrow(InvalidTelegramDataException);\n    });\n\n    it('should reactivate inactive user', async () => {\n      const inactiveUser = { ...mockUser, isActive: false } as User;\n      usersService.findByTelegramId.mockResolvedValue(inactiveUser);\n      const activeUser = { ...mockUser, isActive: true } as User;\n      usersService.update.mockResolvedValue(activeUser);\n\n      await service.authenticateTelegramUser(mockTelegramUser);\n\n      expect(usersService.update).toHaveBeenCalledWith(\n        '123456789',\n        expect.objectContaining({ isActive: true }),\n      );\n    });\n  });\n\n  describe('handleStartCommand', () => {\n    it('should handle start command for new user', async () => {\n      usersService.exists.mockResolvedValue(false);\n      usersService.findByTelegramId.mockResolvedValue(null);\n      usersService.create.mockResolvedValue(mockUser);\n\n      const result = await service.handleStartCommand(mockTelegramUser);\n\n      expect(result.isNewUser).toBe(true);\n      expect(result.user).toEqual(mockUser);\n      expect(result.welcomeMessage).toContain('はじめまして');\n    });\n\n    it('should handle start command for existing user', async () => {\n      usersService.exists.mockResolvedValue(true);\n      usersService.findByTelegramId.mockResolvedValue(mockUser);\n      usersService.update.mockResolvedValue(mockUser);\n\n      const result = await service.handleStartCommand(mockTelegramUser);\n\n      expect(result.isNewUser).toBe(false);\n      expect(result.user).toEqual(mockUser);\n      expect(result.welcomeMessage).toContain('おかえりなさい');\n    });\n  });\n\n  describe('validateUser', () => {\n    it('should return true for active user', async () => {\n      usersService.findByTelegramId.mockResolvedValue(mockUser);\n\n      const result = await service.validateUser('123456789');\n\n      expect(result).toBe(true);\n    });\n\n    it('should return false for inactive user', async () => {\n      const inactiveUser = { ...mockUser, isActive: false } as User;\n      usersService.findByTelegramId.mockResolvedValue(inactiveUser);\n\n      const result = await service.validateUser('123456789');\n\n      expect(result).toBe(false);\n    });\n\n    it('should return false for non-existent user', async () => {\n      usersService.findByTelegramId.mockResolvedValue(null);\n\n      const result = await service.validateUser('123456789');\n\n      expect(result).toBe(false);\n    });\n  });\n});\n"],"version":3}