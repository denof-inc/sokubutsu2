595e2fad856561d949eb9ebfe1e0695e
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var TelegramController_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramController = void 0;
const common_1 = require("@nestjs/common");
const guards_1 = require("../../common/guards");
const telegram_user_decorator_1 = require("../../core/auth/decorators/telegram-user.decorator");
const user_entity_1 = require("../users/entities/user.entity");
const auth_service_1 = require("../../core/auth/auth.service");
const telegram_service_1 = require("./telegram.service");
let TelegramController = TelegramController_1 = class TelegramController {
    authService;
    telegramService;
    logger = new common_1.Logger(TelegramController_1.name);
    constructor(authService, telegramService) {
        this.authService = authService;
        this.telegramService = telegramService;
    }
    /**
     * Telegram Webhook エンドポイント
     */
    async handleUpdate(update, user, telegramUser, isNewUser) {
        this.logger.debug(`Received update: ${String(JSON.stringify(update))}`);
        // メッセージがない場合は無視
        if (!update.message || !update.message.text) {
            return { ok: true };
        }
        const chatId = update.message.chat.id;
        const text = update.message.text;
        // コマンドの解析
        const command = this.parseCommand(text);
        try {
            switch (command.name) {
                case '/start':
                    await this.handleStartCommand(chatId, telegramUser, isNewUser);
                    break;
                case '/add':
                    await this.handleAddCommand(chatId, user, command.args);
                    break;
                case '/list':
                    await this.handleListCommand(chatId, user);
                    break;
                case '/remove':
                    await this.handleRemoveCommand(chatId, user, command.args);
                    break;
                case '/pause':
                    await this.handlePauseCommand(chatId, user, command.args);
                    break;
                case '/resume':
                    await this.handleResumeCommand(chatId, user, command.args);
                    break;
                case '/status':
                    await this.handleStatusCommand(chatId, user);
                    break;
                case '/help':
                    await this.handleHelpCommand(chatId);
                    break;
                default:
                    await this.telegramService.sendMessage(chatId, '不明なコマンドです。/help でコマンド一覧を確認してください。');
            }
        }
        catch (error) {
            this.logger.error(`Command execution error:`, error);
            await this.telegramService.sendMessage(chatId, 'エラーが発生しました。しばらく待ってから再度お試しください。');
        }
        return { ok: true };
    }
    /**
     * /start コマンドハンドラー
     */
    async handleStartCommand(chatId, telegramUser, _isNewUser) {
        const result = await this.authService.handleStartCommand(telegramUser);
        await this.telegramService.sendMessage(chatId, result.welcomeMessage);
    }
    /**
     * /add コマンドハンドラー
     */
    async handleAddCommand(chatId, user, args) {
        if (args.length === 0) {
            await this.telegramService.sendMessage(chatId, '使用方法: /add <URL>\n例: /add https://www.example.com/property/123');
            return;
        }
        const url = args[0];
        // URL検証
        if (!this.isValidUrl(url)) {
            await this.telegramService.sendMessage(chatId, '有効なURLを入力してください。');
            return;
        }
        // TODO: URL追加処理を実装
        await this.telegramService.sendMessage(chatId, `URL "${url}" を監視リストに追加しました！\n新着物件が見つかり次第お知らせします。`);
    }
    /**
     * /list コマンドハンドラー
     */
    async handleListCommand(chatId, _user) {
        // TODO: ユーザーの監視URL一覧を取得
        const message = `
📋 監視中のURL一覧:

1. https://example.com/property/123
   状態: 🟢 監視中
   最終チェック: 5分前

2. https://example.com/property/456
   状態: ⏸️ 一時停止中
   最終チェック: 1時間前

登録数: 2件
    `.trim();
        await this.telegramService.sendMessage(chatId, message);
    }
    /**
     * /remove コマンドハンドラー
     */
    async handleRemoveCommand(chatId, user, args) {
        if (args.length === 0) {
            await this.telegramService.sendMessage(chatId, '使用方法: /remove <番号>\n/list で番号を確認してください。');
            return;
        }
        const index = parseInt(args[0]);
        if (isNaN(index)) {
            await this.telegramService.sendMessage(chatId, '番号を正しく入力してください。');
            return;
        }
        // TODO: URL削除処理を実装
        await this.telegramService.sendMessage(chatId, `番号 ${String(index)} のURLを削除しました。`);
    }
    /**
     * /pause コマンドハンドラー
     */
    async handlePauseCommand(chatId, user, args) {
        if (args.length === 0) {
            await this.telegramService.sendMessage(chatId, '使用方法: /pause <番号>\n/list で番号を確認してください。');
            return;
        }
        const index = parseInt(args[0]);
        if (isNaN(index)) {
            await this.telegramService.sendMessage(chatId, '番号を正しく入力してください。');
            return;
        }
        // TODO: 監視一時停止処理を実装
        await this.telegramService.sendMessage(chatId, `番号 ${String(index)} の監視を一時停止しました。`);
    }
    /**
     * /resume コマンドハンドラー
     */
    async handleResumeCommand(chatId, user, args) {
        if (args.length === 0) {
            await this.telegramService.sendMessage(chatId, '使用方法: /resume <番号>\n/list で番号を確認してください。');
            return;
        }
        const index = parseInt(args[0]);
        if (isNaN(index)) {
            await this.telegramService.sendMessage(chatId, '番号を正しく入力してください。');
            return;
        }
        // TODO: 監視再開処理を実装
        await this.telegramService.sendMessage(chatId, `番号 ${String(index)} の監視を再開しました。`);
    }
    /**
     * /status コマンドハンドラー
     */
    async handleStatusCommand(chatId, user) {
        // TODO: ユーザーの監視状況を取得
        const message = `
📊 監視状況:

👤 ユーザー: ${user.fullName}
📅 登録日: ${user.createdAt.toLocaleDateString('ja-JP')}
🔍 監視中URL: 2件
⏸️ 一時停止中: 1件
🔔 通知設定: ${user.settings?.notifications.enabled ? 'ON' : 'OFF'}

最終チェック: 5分前
次回チェック: 10分後
    `.trim();
        await this.telegramService.sendMessage(chatId, message);
    }
    /**
     * /help コマンドハンドラー
     */
    async handleHelpCommand(chatId) {
        const message = `
📚 コマンド一覧:

/start - ボットを開始
/add <URL> - 監視URLを追加
/list - 登録URL一覧を表示
/remove <番号> - URLを削除
/pause <番号> - 監視を一時停止
/resume <番号> - 監視を再開
/status - 監視状況を確認
/help - このヘルプを表示

❓ 使い方:
1. /add でURLを登録
2. 新着物件があれば自動通知
3. /list で登録状況を確認

お困りの場合は @sokubutsu_support までご連絡ください。
    `.trim();
        await this.telegramService.sendMessage(chatId, message);
    }
    /**
     * コマンドをパース
     */
    parseCommand(text) {
        const parts = text.trim().split(/\s+/);
        const name = parts[0].toLowerCase();
        const args = parts.slice(1);
        return { name, args };
    }
    /**
     * URL検証
     */
    isValidUrl(url) {
        try {
            new URL(url);
            return true;
        }
        catch {
            return false;
        }
    }
};
exports.TelegramController = TelegramController;
__decorate([
    (0, common_1.Post)('webhook'),
    (0, common_1.UseGuards)(guards_1.TelegramWebhookGuard, guards_1.TelegramAuthGuard, guards_1.RateLimitGuard),
    __param(0, (0, common_1.Body)()),
    __param(1, (0, telegram_user_decorator_1.CurrentUser)()),
    __param(2, (0, telegram_user_decorator_1.TelegramUser)()),
    __param(3, (0, telegram_user_decorator_1.IsNewUser)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, user_entity_1.User, Object, Boolean]),
    __metadata("design:returntype", Promise)
], TelegramController.prototype, "handleUpdate", null);
exports.TelegramController = TelegramController = TelegramController_1 = __decorate([
    (0, common_1.Controller)('telegram'),
    __metadata("design:paramtypes", [auth_service_1.AuthService,
        telegram_service_1.TelegramService])
], TelegramController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,