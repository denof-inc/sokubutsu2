{"file":"/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/common/exceptions/scraping.exceptions.ts","mappings":"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","names":[],"sources":["/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/common/exceptions/scraping.exceptions.ts"],"sourcesContent":["/**\n * スクレイピングエラーの基底クラス\n */\nexport abstract class ScrapingError extends Error {\n  public readonly code: string;\n  public readonly timestamp: Date;\n  public readonly context: Record<string, any>;\n  public readonly recoverable: boolean;\n\n  constructor(\n    message: string,\n    code: string,\n    recoverable: boolean = false,\n    context: Record<string, any> = {},\n  ) {\n    super(message);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.timestamp = new Date();\n    this.recoverable = recoverable;\n    this.context = context;\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (\n      'captureStackTrace' in Error &&\n      typeof Error.captureStackTrace === 'function'\n    ) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n  /**\n   * エラーの詳細情報を取得\n   */\n  getDetails(): {\n    name: string;\n    code: string;\n    message: string;\n    timestamp: Date;\n    recoverable: boolean;\n    context: Record<string, any>;\n    stack?: string;\n  } {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message,\n      timestamp: this.timestamp,\n      recoverable: this.recoverable,\n      context: this.context,\n      stack: this.stack,\n    };\n  }\n}\n\n/**\n * ネットワーク関連エラー\n */\nexport class NetworkError extends ScrapingError {\n  constructor(message: string, context: Record<string, any> = {}) {\n    super(message, 'NETWORK_ERROR', true, context);\n  }\n}\n\n/**\n * タイムアウトエラー\n */\nexport class TimeoutError extends ScrapingError {\n  constructor(\n    message: string,\n    timeoutMs: number,\n    context: Record<string, any> = {},\n  ) {\n    super(message, 'TIMEOUT_ERROR', true, { ...context, timeoutMs });\n  }\n}\n\n/**\n * Bot検知エラー\n */\nexport class BotDetectionError extends ScrapingError {\n  public readonly detectionType: 'captcha' | 'block' | 'challenge' | 'unknown';\n\n  constructor(\n    message: string,\n    detectionType: 'captcha' | 'block' | 'challenge' | 'unknown' = 'unknown',\n    context: Record<string, any> = {},\n  ) {\n    super(\n      message,\n      'BOT_DETECTION_ERROR',\n      detectionType === 'captcha', // CAPTCHAの場合は回復可能\n      { ...context, detectionType },\n    );\n    this.detectionType = detectionType;\n  }\n}\n\n/**\n * コンテンツパースエラー\n */\nexport class ParsingError extends ScrapingError {\n  constructor(\n    message: string,\n    selector?: string,\n    context: Record<string, any> = {},\n  ) {\n    super(message, 'PARSING_ERROR', false, { ...context, selector });\n  }\n}\n\n/**\n * ブラウザエラー\n */\nexport class BrowserError extends ScrapingError {\n  constructor(\n    message: string,\n    browserError?: Error,\n    context: Record<string, any> = {},\n  ) {\n    super(message, 'BROWSER_ERROR', true, {\n      ...context,\n      originalError: browserError?.message,\n      originalStack: browserError?.stack,\n    });\n  }\n}\n\n/**\n * リソース制限エラー\n */\nexport class ResourceLimitError extends ScrapingError {\n  public readonly resourceType:\n    | 'memory'\n    | 'cpu'\n    | 'browser_pool'\n    | 'rate_limit';\n\n  constructor(\n    message: string,\n    resourceType: 'memory' | 'cpu' | 'browser_pool' | 'rate_limit',\n    context: Record<string, any> = {},\n  ) {\n    super(message, 'RESOURCE_LIMIT_ERROR', true, { ...context, resourceType });\n    this.resourceType = resourceType;\n  }\n}\n\n/**\n * 認証エラー\n */\nexport class AuthenticationError extends ScrapingError {\n  constructor(message: string, context: Record<string, any> = {}) {\n    super(message, 'AUTHENTICATION_ERROR', false, context);\n  }\n}\n\n/**\n * データ検証エラー\n */\nexport class ValidationError extends ScrapingError {\n  public readonly validationErrors: Array<{\n    field: string;\n    message: string;\n    value?: any;\n  }>;\n\n  constructor(\n    message: string,\n    validationErrors: Array<{\n      field: string;\n      message: string;\n      value?: any;\n    }> = [],\n    context: Record<string, any> = {},\n  ) {\n    super(message, 'VALIDATION_ERROR', false, { ...context, validationErrors });\n    this.validationErrors = validationErrors;\n  }\n}\n\n/**\n * エラー分類ユーティリティ\n */\nexport const ErrorClassifier = {\n  /**\n   * エラーを分類して適切なScrapingErrorに変換\n   */\n  classify(error: Error, context: Record<string, any> = {}): ScrapingError {\n    const message = error.message.toLowerCase();\n\n    // タイムアウト検出\n    if (message.includes('timeout') || message.includes('timed out')) {\n      const timeoutMatch = message.match(/(\\d+)ms/);\n      const timeoutMs = timeoutMatch ? parseInt(timeoutMatch[1]) : 0;\n      return new TimeoutError(error.message, timeoutMs, context);\n    }\n\n    // ネットワークエラー検出\n    if (\n      message.includes('network') ||\n      message.includes('connection') ||\n      message.includes('econnrefused') ||\n      message.includes('dns')\n    ) {\n      return new NetworkError(error.message, context);\n    }\n\n    // Bot検知エラー\n    if (message.includes('captcha') || message.includes('/sorry/')) {\n      return new BotDetectionError(error.message, 'captcha', context);\n    }\n\n    if (message.includes('blocked') || message.includes('forbidden')) {\n      return new BotDetectionError(error.message, 'block', context);\n    }\n\n    // ブラウザエラー\n    if (\n      message.includes('browser') ||\n      message.includes('page') ||\n      message.includes('context') ||\n      error.name === 'TargetClosedError'\n    ) {\n      return new BrowserError(error.message, error, context);\n    }\n\n    // パースエラー\n    if (\n      message.includes('selector') ||\n      message.includes('element') ||\n      message.includes('parse')\n    ) {\n      return new ParsingError(error.message, undefined, context);\n    }\n\n    // デフォルト: 一般的なスクレイピングエラー\n    return new (class extends ScrapingError {\n      constructor() {\n        super(error.message, 'UNKNOWN_ERROR', false, context);\n      }\n    })();\n  },\n\n  /**\n   * エラーが回復可能かどうかを判定\n   */\n  isRecoverable(error: Error): boolean {\n    if (error instanceof ScrapingError) {\n      return error.recoverable;\n    }\n\n    // ScrapingErrorでない場合は分類して判定\n    const classified = ErrorClassifier.classify(error);\n    return classified.recoverable;\n  },\n\n  /**\n   * リトライ戦略の提案\n   */\n  suggestRetryStrategy(error: ScrapingError): {\n    shouldRetry: boolean;\n    delay: number;\n    maxRetries: number;\n    strategy: string;\n  } {\n    if (!error.recoverable) {\n      return {\n        shouldRetry: false,\n        delay: 0,\n        maxRetries: 0,\n        strategy: 'no_retry',\n      };\n    }\n\n    switch (error.code) {\n      case 'TIMEOUT_ERROR':\n        return {\n          shouldRetry: true,\n          delay: 2000,\n          maxRetries: 3,\n          strategy: 'exponential_backoff',\n        };\n\n      case 'NETWORK_ERROR':\n        return {\n          shouldRetry: true,\n          delay: 1000,\n          maxRetries: 5,\n          strategy: 'exponential_backoff_with_jitter',\n        };\n\n      case 'BOT_DETECTION_ERROR':\n        if (\n          error instanceof BotDetectionError &&\n          error.detectionType === 'captcha'\n        ) {\n          return {\n            shouldRetry: true,\n            delay: 30000, // 30秒待機\n            maxRetries: 2,\n            strategy: 'fixed_delay_with_strategy_change',\n          };\n        }\n        return {\n          shouldRetry: false,\n          delay: 0,\n          maxRetries: 0,\n          strategy: 'no_retry',\n        };\n\n      case 'RESOURCE_LIMIT_ERROR':\n        return {\n          shouldRetry: true,\n          delay: 5000,\n          maxRetries: 3,\n          strategy: 'linear_backoff',\n        };\n\n      case 'BROWSER_ERROR':\n        return {\n          shouldRetry: true,\n          delay: 3000,\n          maxRetries: 2,\n          strategy: 'fixed_delay',\n        };\n\n      default:\n        return {\n          shouldRetry: true,\n          delay: 1000,\n          maxRetries: 3,\n          strategy: 'exponential_backoff',\n        };\n    }\n  },\n};\n"],"version":3}