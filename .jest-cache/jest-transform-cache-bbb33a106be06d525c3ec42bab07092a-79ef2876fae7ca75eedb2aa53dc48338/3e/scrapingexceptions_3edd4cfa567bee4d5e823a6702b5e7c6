e423d7ea842584ee9a188893b3b8e463
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorClassifier = exports.ValidationError = exports.AuthenticationError = exports.ResourceLimitError = exports.BrowserError = exports.ParsingError = exports.BotDetectionError = exports.TimeoutError = exports.NetworkError = exports.ScrapingError = void 0;
/**
 * スクレイピングエラーの基底クラス
 */
class ScrapingError extends Error {
    code;
    timestamp;
    context;
    recoverable;
    constructor(message, code, recoverable = false, context = {}) {
        super(message);
        this.name = this.constructor.name;
        this.code = code;
        this.timestamp = new Date();
        this.recoverable = recoverable;
        this.context = context;
        // Maintains proper stack trace for where our error was thrown (only available on V8)
        if ('captureStackTrace' in Error &&
            typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, this.constructor);
        }
    }
    /**
     * エラーの詳細情報を取得
     */
    getDetails() {
        return {
            name: this.name,
            code: this.code,
            message: this.message,
            timestamp: this.timestamp,
            recoverable: this.recoverable,
            context: this.context,
            stack: this.stack,
        };
    }
}
exports.ScrapingError = ScrapingError;
/**
 * ネットワーク関連エラー
 */
class NetworkError extends ScrapingError {
    constructor(message, context = {}) {
        super(message, 'NETWORK_ERROR', true, context);
    }
}
exports.NetworkError = NetworkError;
/**
 * タイムアウトエラー
 */
class TimeoutError extends ScrapingError {
    constructor(message, timeoutMs, context = {}) {
        super(message, 'TIMEOUT_ERROR', true, { ...context, timeoutMs });
    }
}
exports.TimeoutError = TimeoutError;
/**
 * Bot検知エラー
 */
class BotDetectionError extends ScrapingError {
    detectionType;
    constructor(message, detectionType = 'unknown', context = {}) {
        super(message, 'BOT_DETECTION_ERROR', detectionType === 'captcha', // CAPTCHAの場合は回復可能
        { ...context, detectionType });
        this.detectionType = detectionType;
    }
}
exports.BotDetectionError = BotDetectionError;
/**
 * コンテンツパースエラー
 */
class ParsingError extends ScrapingError {
    constructor(message, selector, context = {}) {
        super(message, 'PARSING_ERROR', false, { ...context, selector });
    }
}
exports.ParsingError = ParsingError;
/**
 * ブラウザエラー
 */
class BrowserError extends ScrapingError {
    constructor(message, browserError, context = {}) {
        super(message, 'BROWSER_ERROR', true, {
            ...context,
            originalError: browserError?.message,
            originalStack: browserError?.stack,
        });
    }
}
exports.BrowserError = BrowserError;
/**
 * リソース制限エラー
 */
class ResourceLimitError extends ScrapingError {
    resourceType;
    constructor(message, resourceType, context = {}) {
        super(message, 'RESOURCE_LIMIT_ERROR', true, { ...context, resourceType });
        this.resourceType = resourceType;
    }
}
exports.ResourceLimitError = ResourceLimitError;
/**
 * 認証エラー
 */
class AuthenticationError extends ScrapingError {
    constructor(message, context = {}) {
        super(message, 'AUTHENTICATION_ERROR', false, context);
    }
}
exports.AuthenticationError = AuthenticationError;
/**
 * データ検証エラー
 */
class ValidationError extends ScrapingError {
    validationErrors;
    constructor(message, validationErrors = [], context = {}) {
        super(message, 'VALIDATION_ERROR', false, { ...context, validationErrors });
        this.validationErrors = validationErrors;
    }
}
exports.ValidationError = ValidationError;
/**
 * エラー分類ユーティリティ
 */
exports.ErrorClassifier = {
    /**
     * エラーを分類して適切なScrapingErrorに変換
     */
    classify(error, context = {}) {
        const message = error.message.toLowerCase();
        // タイムアウト検出
        if (message.includes('timeout') || message.includes('timed out')) {
            const timeoutMatch = message.match(/(\d+)ms/);
            const timeoutMs = timeoutMatch ? parseInt(timeoutMatch[1]) : 0;
            return new TimeoutError(error.message, timeoutMs, context);
        }
        // ネットワークエラー検出
        if (message.includes('network') ||
            message.includes('connection') ||
            message.includes('econnrefused') ||
            message.includes('dns')) {
            return new NetworkError(error.message, context);
        }
        // Bot検知エラー
        if (message.includes('captcha') || message.includes('/sorry/')) {
            return new BotDetectionError(error.message, 'captcha', context);
        }
        if (message.includes('blocked') || message.includes('forbidden')) {
            return new BotDetectionError(error.message, 'block', context);
        }
        // ブラウザエラー
        if (message.includes('browser') ||
            message.includes('page') ||
            message.includes('context') ||
            error.name === 'TargetClosedError') {
            return new BrowserError(error.message, error, context);
        }
        // パースエラー
        if (message.includes('selector') ||
            message.includes('element') ||
            message.includes('parse')) {
            return new ParsingError(error.message, undefined, context);
        }
        // デフォルト: 一般的なスクレイピングエラー
        return new (class extends ScrapingError {
            constructor() {
                super(error.message, 'UNKNOWN_ERROR', false, context);
            }
        })();
    },
    /**
     * エラーが回復可能かどうかを判定
     */
    isRecoverable(error) {
        if (error instanceof ScrapingError) {
            return error.recoverable;
        }
        // ScrapingErrorでない場合は分類して判定
        const classified = exports.ErrorClassifier.classify(error);
        return classified.recoverable;
    },
    /**
     * リトライ戦略の提案
     */
    suggestRetryStrategy(error) {
        if (!error.recoverable) {
            return {
                shouldRetry: false,
                delay: 0,
                maxRetries: 0,
                strategy: 'no_retry',
            };
        }
        switch (error.code) {
            case 'TIMEOUT_ERROR':
                return {
                    shouldRetry: true,
                    delay: 2000,
                    maxRetries: 3,
                    strategy: 'exponential_backoff',
                };
            case 'NETWORK_ERROR':
                return {
                    shouldRetry: true,
                    delay: 1000,
                    maxRetries: 5,
                    strategy: 'exponential_backoff_with_jitter',
                };
            case 'BOT_DETECTION_ERROR':
                if (error instanceof BotDetectionError &&
                    error.detectionType === 'captcha') {
                    return {
                        shouldRetry: true,
                        delay: 30000, // 30秒待機
                        maxRetries: 2,
                        strategy: 'fixed_delay_with_strategy_change',
                    };
                }
                return {
                    shouldRetry: false,
                    delay: 0,
                    maxRetries: 0,
                    strategy: 'no_retry',
                };
            case 'RESOURCE_LIMIT_ERROR':
                return {
                    shouldRetry: true,
                    delay: 5000,
                    maxRetries: 3,
                    strategy: 'linear_backoff',
                };
            case 'BROWSER_ERROR':
                return {
                    shouldRetry: true,
                    delay: 3000,
                    maxRetries: 2,
                    strategy: 'fixed_delay',
                };
            default:
                return {
                    shouldRetry: true,
                    delay: 1000,
                    maxRetries: 3,
                    strategy: 'exponential_backoff',
                };
        }
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,