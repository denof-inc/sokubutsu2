79d9fe127c41a282572d9f5313bd71be
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const users_service_1 = require("./users.service");
const user_entity_1 = require("./entities/user.entity");
const common_1 = require("@nestjs/common");
describe('UsersService', () => {
    let service;
    let repository;
    const mockUser = {
        id: 1,
        telegramId: '123456789',
        firstName: 'Test',
        lastName: 'User',
        username: 'testuser',
        isActive: true,
        languageCode: 'ja',
        settings: {
            notifications: { enabled: true, silent: false },
            language: 'ja',
        },
        lastActiveAt: new Date(),
        createdAt: new Date(),
        updatedAt: new Date(),
        fullName: 'Test User',
        displayName: 'testuser',
    };
    const mockCreateUserDto = {
        telegramId: '123456789',
        firstName: 'Test',
        lastName: 'User',
        username: 'testuser',
        languageCode: 'ja',
        isActive: true,
        settings: {
            notifications: { enabled: true, silent: false },
            language: 'ja',
        },
    };
    beforeEach(async () => {
        const mockRepository = {
            findOne: jest.fn(),
            save: jest.fn(),
            create: jest.fn(),
            count: jest.fn(),
            find: jest.fn(),
        };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                users_service_1.UsersService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(user_entity_1.User),
                    useValue: mockRepository,
                },
            ],
        }).compile();
        service = module.get(users_service_1.UsersService);
        repository = module.get((0, typeorm_1.getRepositoryToken)(user_entity_1.User));
    });
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    describe('create', () => {
        it('should create a new user', async () => {
            repository.findOne.mockResolvedValue(null);
            repository.create.mockReturnValue(mockUser);
            repository.save.mockResolvedValue(mockUser);
            const result = await service.create(mockCreateUserDto);
            expect(result).toEqual(mockUser);
            expect(repository.findOne).toHaveBeenCalledWith({
                where: { telegramId: '123456789' },
            });
            expect(repository.create).toHaveBeenCalledWith(mockCreateUserDto);
            expect(repository.save).toHaveBeenCalled();
        });
        it('should throw ConflictException if user already exists', async () => {
            repository.findOne.mockResolvedValue(mockUser);
            await expect(service.create(mockCreateUserDto)).rejects.toThrow(common_1.ConflictException);
        });
        it('should handle database errors', async () => {
            repository.findOne.mockResolvedValue(null);
            repository.create.mockReturnValue(mockUser);
            repository.save.mockRejectedValue(new Error('Database error'));
            await expect(service.create(mockCreateUserDto)).rejects.toThrow(common_1.InternalServerErrorException);
        });
    });
    describe('findByTelegramId', () => {
        it('should find user by telegram ID', async () => {
            repository.findOne.mockResolvedValue(mockUser);
            const result = await service.findByTelegramId('123456789');
            expect(result).toEqual(mockUser);
            expect(repository.findOne).toHaveBeenCalledWith({
                where: { telegramId: '123456789' },
            });
        });
        it('should return null if user not found', async () => {
            repository.findOne.mockResolvedValue(null);
            const result = await service.findByTelegramId('999999999');
            expect(result).toBeNull();
        });
        it('should handle database errors', async () => {
            repository.findOne.mockRejectedValue(new Error('Database error'));
            await expect(service.findByTelegramId('123456789')).rejects.toThrow(common_1.InternalServerErrorException);
        });
    });
    describe('update', () => {
        it('should update existing user', async () => {
            const updateDto = {
                lastActiveAt: new Date(),
                isActive: true,
            };
            repository.findOne.mockResolvedValue(mockUser);
            const updatedUser = { ...mockUser, ...updateDto };
            repository.save.mockResolvedValue(updatedUser);
            const result = await service.update('123456789', updateDto);
            expect(result.isActive).toBe(true);
            expect(repository.save).toHaveBeenCalledWith(expect.objectContaining(updateDto));
        });
        it('should throw NotFoundException if user not found', async () => {
            repository.findOne.mockResolvedValue(null);
            await expect(service.update('999999999', {})).rejects.toThrow(common_1.NotFoundException);
        });
        it('should handle database errors during update', async () => {
            repository.findOne.mockResolvedValue(mockUser);
            repository.save.mockRejectedValue(new Error('Database error'));
            await expect(service.update('123456789', {})).rejects.toThrow(common_1.InternalServerErrorException);
        });
    });
    describe('exists', () => {
        it('should return true if user exists', async () => {
            repository.count.mockResolvedValue(1);
            const result = await service.exists('123456789');
            expect(result).toBe(true);
            expect(repository.count).toHaveBeenCalledWith({
                where: { telegramId: '123456789' },
            });
        });
        it('should return false if user does not exist', async () => {
            repository.count.mockResolvedValue(0);
            const result = await service.exists('999999999');
            expect(result).toBe(false);
        });
        it('should handle database errors', async () => {
            repository.count.mockRejectedValue(new Error('Database error'));
            await expect(service.exists('123456789')).rejects.toThrow(common_1.InternalServerErrorException);
        });
    });
    describe('deactivate', () => {
        it('should deactivate active user', async () => {
            repository.findOne.mockResolvedValue(mockUser);
            const deactivatedUser = { ...mockUser, isActive: false };
            repository.save.mockResolvedValue(deactivatedUser);
            await service.deactivate('123456789');
            expect(repository.save).toHaveBeenCalledWith(expect.objectContaining({ isActive: false }));
        });
        it('should throw NotFoundException if user not found', async () => {
            repository.findOne.mockResolvedValue(null);
            await expect(service.deactivate('999999999')).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('updateSettings', () => {
        it('should update user settings', async () => {
            const newSettings = {
                notifications: { enabled: false, silent: true },
                language: 'en',
            };
            repository.findOne.mockResolvedValue(mockUser);
            const updatedUser = { ...mockUser, settings: newSettings };
            repository.save.mockResolvedValue(updatedUser);
            const result = await service.updateSettings('123456789', newSettings);
            expect(result.settings).toEqual(newSettings);
        });
        it('should merge settings correctly', async () => {
            const partialSettings = {
                notifications: {
                    enabled: false,
                    silent: false,
                },
            };
            repository.findOne.mockResolvedValue(mockUser);
            const mergedSettings = {
                ...mockUser,
                settings: {
                    ...mockUser.settings,
                    ...partialSettings,
                },
            };
            repository.save.mockResolvedValue(mergedSettings);
            const result = await service.updateSettings('123456789', partialSettings);
            expect(result.settings?.notifications.enabled).toBe(false);
            expect(result.settings?.notifications.silent).toBe(false);
        });
    });
    describe('findActiveUsers', () => {
        it('should find active users', async () => {
            const mockActiveUsers = [mockUser];
            repository.find = jest.fn().mockResolvedValue(mockActiveUsers);
            const result = await service.findActiveUsers();
            expect(result).toEqual(mockActiveUsers);
            expect(repository.find).toHaveBeenCalledWith({
                where: { isActive: true },
                order: { lastActiveAt: 'DESC' },
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,