ec32299e03396835d76430e3cf1e589f
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var TelegramService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const axios_1 = __importDefault(require("axios"));
let TelegramService = TelegramService_1 = class TelegramService {
    configService;
    logger = new common_1.Logger(TelegramService_1.name);
    botToken;
    apiUrl;
    constructor(configService) {
        this.configService = configService;
        this.botToken = this.configService.get('TELEGRAM_BOT_TOKEN', '');
        this.apiUrl = `https://api.telegram.org/bot${this.botToken}`;
    }
    /**
     * Telegramメッセージ送信
     */
    async sendMessage(chatId, text, options) {
        try {
            const response = await axios_1.default.post(`${this.apiUrl}/sendMessage`, {
                chat_id: chatId,
                text,
                ...options,
            });
            if (!response.data.ok) {
                throw new Error(`Telegram API error: ${String(response.data.description)}`);
            }
            this.logger.debug(`Message sent to ${String(chatId)}`);
        }
        catch (error) {
            this.logger.error(`Failed to send message to ${String(chatId)}:`, error);
            throw error;
        }
    }
    /**
     * 写真付きメッセージ送信（物件情報通知用）
     */
    async sendPhoto(chatId, photo, caption, options) {
        try {
            const response = await axios_1.default.post(`${this.apiUrl}/sendPhoto`, {
                chat_id: chatId,
                photo,
                caption,
                ...options,
            });
            if (!response.data.ok) {
                throw new Error(`Telegram API error: ${String(response.data.description)}`);
            }
            this.logger.debug(`Photo sent to ${String(chatId)}`);
        }
        catch (error) {
            this.logger.error(`Failed to send photo to ${String(chatId)}:`, error);
            throw error;
        }
    }
    /**
     * インラインキーボード付きメッセージ送信
     */
    async sendMessageWithKeyboard(chatId, text, keyboard) {
        await this.sendMessage(chatId, text, {
            reply_markup: {
                inline_keyboard: keyboard,
            },
        });
    }
    /**
     * Webhook設定
     */
    async setWebhook(webhookUrl) {
        try {
            const response = await axios_1.default.post(`${this.apiUrl}/setWebhook`, {
                url: webhookUrl,
            });
            if (!response.data.ok) {
                throw new Error(`Failed to set webhook: ${String(response.data.description)}`);
            }
            this.logger.log(`Webhook set to ${webhookUrl}`);
        }
        catch (error) {
            this.logger.error('Failed to set webhook:', error);
            throw error;
        }
    }
    /**
     * Webhook削除
     */
    async deleteWebhook() {
        try {
            const response = await axios_1.default.post(`${this.apiUrl}/deleteWebhook`);
            if (!response.data.ok) {
                throw new Error(`Failed to delete webhook: ${String(response.data.description)}`);
            }
            this.logger.log('Webhook deleted');
        }
        catch (error) {
            this.logger.error('Failed to delete webhook:', error);
            throw error;
        }
    }
    /**
     * Bot情報取得
     */
    async getMe() {
        try {
            const response = await axios_1.default.get(`${this.apiUrl}/getMe`);
            if (!response.data.ok) {
                throw new Error(`Failed to get bot info: ${String(response.data.description)}`);
            }
            return response.data.result;
        }
        catch (error) {
            this.logger.error('Failed to get bot info:', error);
            throw error;
        }
    }
};
exports.TelegramService = TelegramService;
exports.TelegramService = TelegramService = TelegramService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [config_1.ConfigService])
], TelegramService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,