{"file":"/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/domain/telegram/telegram.service.ts","mappings":"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","names":[],"sources":["/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/domain/telegram/telegram.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport axios from 'axios';\n\n@Injectable()\nexport class TelegramService {\n  private readonly logger = new Logger(TelegramService.name);\n  private readonly botToken: string;\n  private readonly apiUrl: string;\n\n  constructor(private readonly configService: ConfigService) {\n    this.botToken = this.configService.get<string>('TELEGRAM_BOT_TOKEN', '');\n    this.apiUrl = `https://api.telegram.org/bot${this.botToken}`;\n  }\n\n  /**\n   * Telegramメッセージ送信\n   */\n  async sendMessage(\n    chatId: number,\n    text: string,\n    options?: {\n      parse_mode?: 'Markdown' | 'HTML';\n      disable_web_page_preview?: boolean;\n      disable_notification?: boolean;\n      reply_markup?: any;\n    },\n  ): Promise<void> {\n    try {\n      const response = await axios.post(`${this.apiUrl}/sendMessage`, {\n        chat_id: chatId,\n        text,\n        ...options,\n      });\n\n      if (!response.data.ok) {\n        throw new Error(\n          `Telegram API error: ${String(response.data.description)}`,\n        );\n      }\n\n      this.logger.debug(`Message sent to ${String(chatId)}`);\n    } catch (error) {\n      this.logger.error(`Failed to send message to ${String(chatId)}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 写真付きメッセージ送信（物件情報通知用）\n   */\n  async sendPhoto(\n    chatId: number,\n    photo: string,\n    caption?: string,\n    options?: {\n      parse_mode?: 'Markdown' | 'HTML';\n      disable_notification?: boolean;\n    },\n  ): Promise<void> {\n    try {\n      const response = await axios.post(`${this.apiUrl}/sendPhoto`, {\n        chat_id: chatId,\n        photo,\n        caption,\n        ...options,\n      });\n\n      if (!response.data.ok) {\n        throw new Error(\n          `Telegram API error: ${String(response.data.description)}`,\n        );\n      }\n\n      this.logger.debug(`Photo sent to ${String(chatId)}`);\n    } catch (error) {\n      this.logger.error(`Failed to send photo to ${String(chatId)}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * インラインキーボード付きメッセージ送信\n   */\n  async sendMessageWithKeyboard(\n    chatId: number,\n    text: string,\n    keyboard: any[][],\n  ): Promise<void> {\n    await this.sendMessage(chatId, text, {\n      reply_markup: {\n        inline_keyboard: keyboard,\n      },\n    });\n  }\n\n  /**\n   * Webhook設定\n   */\n  async setWebhook(webhookUrl: string): Promise<void> {\n    try {\n      const response = await axios.post(`${this.apiUrl}/setWebhook`, {\n        url: webhookUrl,\n      });\n\n      if (!response.data.ok) {\n        throw new Error(\n          `Failed to set webhook: ${String(response.data.description)}`,\n        );\n      }\n\n      this.logger.log(`Webhook set to ${webhookUrl}`);\n    } catch (error) {\n      this.logger.error('Failed to set webhook:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Webhook削除\n   */\n  async deleteWebhook(): Promise<void> {\n    try {\n      const response = await axios.post(`${this.apiUrl}/deleteWebhook`);\n\n      if (!response.data.ok) {\n        throw new Error(\n          `Failed to delete webhook: ${String(response.data.description)}`,\n        );\n      }\n\n      this.logger.log('Webhook deleted');\n    } catch (error) {\n      this.logger.error('Failed to delete webhook:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Bot情報取得\n   */\n  async getMe(): Promise<any> {\n    try {\n      const response = await axios.get(`${this.apiUrl}/getMe`);\n\n      if (!response.data.ok) {\n        throw new Error(\n          `Failed to get bot info: ${String(response.data.description)}`,\n        );\n      }\n\n      return response.data.result;\n    } catch (error) {\n      this.logger.error('Failed to get bot info:', error);\n      throw error;\n    }\n  }\n}\n"],"version":3}