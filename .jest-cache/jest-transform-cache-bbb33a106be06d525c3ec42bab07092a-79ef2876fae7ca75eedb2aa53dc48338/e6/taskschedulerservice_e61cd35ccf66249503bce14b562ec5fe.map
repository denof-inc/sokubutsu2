{"file":"/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/features/task-scheduler/task-scheduler.service.ts","mappings":"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","names":[],"sources":["/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/features/task-scheduler/task-scheduler.service.ts"],"sourcesContent":["// src/task-scheduler/task-scheduler.service.ts\n\nimport { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport * as cron from 'node-cron';\nimport { UrlService } from '../../domain/url/url.service';\nimport { ScrapingService } from '../scraping/scraping.service';\nimport { NotificationService } from '../notification/notification.service';\nimport { Url } from '../../domain/url/url.interface';\n\n@Injectable()\nexport class TaskSchedulerService implements OnModuleInit {\n  private readonly logger = new Logger(TaskSchedulerService.name);\n\n  constructor(\n    private readonly urlService: UrlService,\n    private readonly scrapingService: ScrapingService,\n    private readonly notificationService: NotificationService,\n  ) {}\n\n  onModuleInit() {\n    this.scheduleJobs();\n  }\n\n  private scheduleJobs() {\n    cron.schedule('* * * * *', async () => {\n      this.logger.log('====== cronジョブを開始します ======');\n      const urlsToScrape = await this.urlService.findAllActive();\n      this.logger.log(`${String(urlsToScrape.length)}件のURLを監視します。`);\n\n      for (const url of urlsToScrape) {\n        await this.processUrl(url);\n      }\n      this.logger.log('====== 今回のcronジョブは完了しました ======');\n    });\n\n    this.logger.log('監視ジョブをスケジュールしました。');\n  }\n\n  private async processUrl(url: Url) {\n    this.logger.log(`[${url.name}] の監視を実行中...`);\n    const newHash = await this.scrapingService.scrapeAndGetHash(\n      url.url,\n      url.selector,\n    );\n\n    if (!newHash) {\n      this.logger.warn(`[${url.name}] のハッシュ値を取得できませんでした。`);\n      return;\n    }\n\n    const oldHash = url.contentHash;\n    this.logger.log(\n      `[${url.name}] 古いハッシュ: ${oldHash ? oldHash.substring(0, 10) : 'なし'}...`,\n    );\n    this.logger.log(\n      `[${url.name}] 新しいハッシュ: ${newHash.substring(0, 10)}...`,\n    );\n\n    if (oldHash !== newHash) {\n      this.logger.log(`★★★★★ [${url.name}] 変更を検知しました！ ★★★★★`);\n      await this.notificationService.sendNotification(\n        `【ソクブツ速報】\\n物件に新着の可能性があります！\\n\\n物件名: ${url.name}\\nURL: ${url.url}`,\n      );\n      await this.urlService.updateHash(url.id, newHash);\n      this.logger.log(`[${url.name}] のハッシュ値を更新しました。`);\n    } else {\n      this.logger.log(`[${url.name}] 変更はありませんでした。`);\n    }\n  }\n}\n"],"version":3}