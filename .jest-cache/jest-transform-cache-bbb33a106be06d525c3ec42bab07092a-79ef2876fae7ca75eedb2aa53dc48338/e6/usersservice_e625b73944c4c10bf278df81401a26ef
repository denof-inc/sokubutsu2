2a04defa06236e505149b7405a05cd58
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var UsersService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const user_entity_1 = require("./entities/user.entity");
let UsersService = UsersService_1 = class UsersService {
    userRepository;
    logger = new common_1.Logger(UsersService_1.name);
    constructor(userRepository) {
        this.userRepository = userRepository;
    }
    async create(createUserDto) {
        try {
            // 既存ユーザーチェック
            const existingUser = await this.findByTelegramId(createUserDto.telegramId);
            if (existingUser) {
                throw new common_1.ConflictException(`User with Telegram ID ${createUserDto.telegramId} already exists`);
            }
            const user = this.userRepository.create(createUserDto);
            const savedUser = await this.userRepository.save(user);
            this.logger.log(`User created: ${savedUser.telegramId}`);
            return savedUser;
        }
        catch (error) {
            if (error instanceof common_1.ConflictException) {
                throw error;
            }
            this.logger.error(`Failed to create user: ${error instanceof Error ? error.message : String(error)}`, error instanceof Error ? error.stack : undefined);
            throw new common_1.InternalServerErrorException('Failed to create user');
        }
    }
    /**
     * 全ユーザーを取得（管理者用）
     */
    async findAll() {
        return this.userRepository.find({
            order: {
                lastActiveAt: 'DESC',
            },
        });
    }
    /**
     * アクティブユーザーのみ取得
     */
    async findActiveUsers() {
        return this.userRepository.find({
            where: {
                isActive: true,
            },
            order: {
                lastActiveAt: 'DESC',
            },
        });
    }
    async findByTelegramId(telegramId) {
        try {
            return await this.userRepository.findOne({
                where: { telegramId },
            });
        }
        catch (error) {
            this.logger.error(`Failed to find user by Telegram ID ${telegramId}: ${error instanceof Error ? error.message : String(error)}`);
            throw new common_1.InternalServerErrorException('Failed to find user');
        }
    }
    async update(telegramId, updateUserDto) {
        try {
            const user = await this.findByTelegramId(telegramId);
            if (!user) {
                throw new common_1.NotFoundException(`User with Telegram ID ${telegramId} not found`);
            }
            Object.assign(user, updateUserDto);
            const updatedUser = await this.userRepository.save(user);
            this.logger.log(`User updated: ${updatedUser.telegramId}`);
            return updatedUser;
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException) {
                throw error;
            }
            this.logger.error(`Failed to update user ${telegramId}: ${error instanceof Error ? error.message : String(error)}`, error instanceof Error ? error.stack : undefined);
            throw new common_1.InternalServerErrorException('Failed to update user');
        }
    }
    /**
     * 最終アクティブ時刻を更新
     */
    async updateLastActive(telegramId) {
        await this.userRepository.update({ telegramId }, { lastActiveAt: new Date() });
    }
    async updateSettings(telegramId, settings) {
        try {
            const user = await this.findByTelegramId(telegramId);
            if (!user) {
                throw new common_1.NotFoundException(`User with Telegram ID ${telegramId} not found`);
            }
            user.settings = { ...user.settings, ...settings };
            const updatedUser = await this.userRepository.save(user);
            this.logger.log(`User settings updated: ${telegramId}`);
            return updatedUser;
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException) {
                throw error;
            }
            this.logger.error(`Failed to update user settings ${telegramId}: ${error instanceof Error ? error.message : String(error)}`, error instanceof Error ? error.stack : undefined);
            throw new common_1.InternalServerErrorException('Failed to update user settings');
        }
    }
    async deactivate(telegramId) {
        try {
            await this.update(telegramId, { isActive: false });
            this.logger.log(`User deactivated: ${telegramId}`);
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException) {
                throw error;
            }
            this.logger.error(`Failed to deactivate user ${telegramId}: ${error instanceof Error ? error.message : String(error)}`, error instanceof Error ? error.stack : undefined);
            throw new common_1.InternalServerErrorException('Failed to deactivate user');
        }
    }
    /**
     * ユーザーを再有効化
     */
    async activate(telegramId) {
        const user = await this.findByTelegramId(telegramId);
        if (!user) {
            throw new common_1.NotFoundException(`User with Telegram ID ${telegramId} not found`);
        }
        user.isActive = true;
        user.lastActiveAt = new Date();
        return this.userRepository.save(user);
    }
    async exists(telegramId) {
        try {
            const count = await this.userRepository.count({
                where: { telegramId },
            });
            return count > 0;
        }
        catch (error) {
            this.logger.error(`Failed to check user existence ${telegramId}: ${error instanceof Error ? error.message : String(error)}`);
            throw new common_1.InternalServerErrorException('Failed to check user existence');
        }
    }
    /**
     * ユーザー統計情報を取得（管理者用）
     */
    async getStatistics() {
        const totalUsers = await this.userRepository.count();
        const activeUsers = await this.userRepository.count({
            where: { isActive: true },
        });
        // 24時間以内にアクティブだったユーザー
        const oneDayAgo = new Date();
        oneDayAgo.setDate(oneDayAgo.getDate() - 1);
        const recentlyActiveUsers = await this.userRepository
            .createQueryBuilder('user')
            .where('user.lastActiveAt > :date', { date: oneDayAgo })
            .getCount();
        return {
            totalUsers,
            activeUsers,
            inactiveUsers: totalUsers - activeUsers,
            recentlyActiveUsers,
        };
    }
};
exports.UsersService = UsersService;
exports.UsersService = UsersService = UsersService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(user_entity_1.User)),
    __metadata("design:paramtypes", [typeorm_2.Repository])
], UsersService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,