{"file":"/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/domain/users/users.service.ts","mappings":"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","names":[],"sources":["/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/domain/users/users.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  ConflictException,\n  Logger,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User, UserSettings } from './entities/user.entity';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Injectable()\nexport class UsersService {\n  private readonly logger = new Logger(UsersService.name);\n\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository<User>,\n  ) {}\n\n  async create(createUserDto: CreateUserDto): Promise<User> {\n    try {\n      // 既存ユーザーチェック\n      const existingUser = await this.findByTelegramId(\n        createUserDto.telegramId,\n      );\n      if (existingUser) {\n        throw new ConflictException(\n          `User with Telegram ID ${createUserDto.telegramId} already exists`,\n        );\n      }\n\n      const user = this.userRepository.create(createUserDto);\n      const savedUser = await this.userRepository.save(user);\n\n      this.logger.log(`User created: ${savedUser.telegramId}`);\n      return savedUser;\n    } catch (error) {\n      if (error instanceof ConflictException) {\n        throw error;\n      }\n      this.logger.error(\n        `Failed to create user: ${error instanceof Error ? error.message : String(error)}`,\n        error instanceof Error ? error.stack : undefined,\n      );\n      throw new InternalServerErrorException('Failed to create user');\n    }\n  }\n\n  /**\n   * 全ユーザーを取得（管理者用）\n   */\n  async findAll(): Promise<User[]> {\n    return this.userRepository.find({\n      order: {\n        lastActiveAt: 'DESC',\n      },\n    });\n  }\n\n  /**\n   * アクティブユーザーのみ取得\n   */\n  async findActiveUsers(): Promise<User[]> {\n    return this.userRepository.find({\n      where: {\n        isActive: true,\n      },\n      order: {\n        lastActiveAt: 'DESC',\n      },\n    });\n  }\n\n  async findByTelegramId(telegramId: string): Promise<User | null> {\n    try {\n      return await this.userRepository.findOne({\n        where: { telegramId },\n      });\n    } catch (error) {\n      this.logger.error(\n        `Failed to find user by Telegram ID ${telegramId}: ${error instanceof Error ? error.message : String(error)}`,\n      );\n      throw new InternalServerErrorException('Failed to find user');\n    }\n  }\n\n  async update(\n    telegramId: string,\n    updateUserDto: UpdateUserDto,\n  ): Promise<User> {\n    try {\n      const user = await this.findByTelegramId(telegramId);\n      if (!user) {\n        throw new NotFoundException(\n          `User with Telegram ID ${telegramId} not found`,\n        );\n      }\n\n      Object.assign(user, updateUserDto);\n      const updatedUser = await this.userRepository.save(user);\n\n      this.logger.log(`User updated: ${updatedUser.telegramId}`);\n      return updatedUser;\n    } catch (error) {\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n      this.logger.error(\n        `Failed to update user ${telegramId}: ${error instanceof Error ? error.message : String(error)}`,\n        error instanceof Error ? error.stack : undefined,\n      );\n      throw new InternalServerErrorException('Failed to update user');\n    }\n  }\n\n  /**\n   * 最終アクティブ時刻を更新\n   */\n  async updateLastActive(telegramId: string): Promise<void> {\n    await this.userRepository.update(\n      { telegramId },\n      { lastActiveAt: new Date() },\n    );\n  }\n\n  async updateSettings(\n    telegramId: string,\n    settings: Partial<UserSettings>,\n  ): Promise<User> {\n    try {\n      const user = await this.findByTelegramId(telegramId);\n      if (!user) {\n        throw new NotFoundException(\n          `User with Telegram ID ${telegramId} not found`,\n        );\n      }\n\n      user.settings = { ...user.settings, ...settings } as UserSettings;\n      const updatedUser = await this.userRepository.save(user);\n\n      this.logger.log(`User settings updated: ${telegramId}`);\n      return updatedUser;\n    } catch (error) {\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n      this.logger.error(\n        `Failed to update user settings ${telegramId}: ${error instanceof Error ? error.message : String(error)}`,\n        error instanceof Error ? error.stack : undefined,\n      );\n      throw new InternalServerErrorException('Failed to update user settings');\n    }\n  }\n\n  async deactivate(telegramId: string): Promise<void> {\n    try {\n      await this.update(telegramId, { isActive: false });\n      this.logger.log(`User deactivated: ${telegramId}`);\n    } catch (error) {\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n      this.logger.error(\n        `Failed to deactivate user ${telegramId}: ${error instanceof Error ? error.message : String(error)}`,\n        error instanceof Error ? error.stack : undefined,\n      );\n      throw new InternalServerErrorException('Failed to deactivate user');\n    }\n  }\n\n  /**\n   * ユーザーを再有効化\n   */\n  async activate(telegramId: string): Promise<User> {\n    const user = await this.findByTelegramId(telegramId);\n\n    if (!user) {\n      throw new NotFoundException(\n        `User with Telegram ID ${telegramId} not found`,\n      );\n    }\n\n    user.isActive = true;\n    user.lastActiveAt = new Date();\n    return this.userRepository.save(user);\n  }\n\n  async exists(telegramId: string): Promise<boolean> {\n    try {\n      const count = await this.userRepository.count({\n        where: { telegramId },\n      });\n      return count > 0;\n    } catch (error) {\n      this.logger.error(\n        `Failed to check user existence ${telegramId}: ${error instanceof Error ? error.message : String(error)}`,\n      );\n      throw new InternalServerErrorException('Failed to check user existence');\n    }\n  }\n\n  /**\n   * ユーザー統計情報を取得（管理者用）\n   */\n  async getStatistics(): Promise<{\n    totalUsers: number;\n    activeUsers: number;\n    inactiveUsers: number;\n    recentlyActiveUsers: number;\n  }> {\n    const totalUsers = await this.userRepository.count();\n    const activeUsers = await this.userRepository.count({\n      where: { isActive: true },\n    });\n\n    // 24時間以内にアクティブだったユーザー\n    const oneDayAgo = new Date();\n    oneDayAgo.setDate(oneDayAgo.getDate() - 1);\n\n    const recentlyActiveUsers = await this.userRepository\n      .createQueryBuilder('user')\n      .where('user.lastActiveAt > :date', { date: oneDayAgo })\n      .getCount();\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers: totalUsers - activeUsers,\n      recentlyActiveUsers,\n    };\n  }\n}\n"],"version":3}