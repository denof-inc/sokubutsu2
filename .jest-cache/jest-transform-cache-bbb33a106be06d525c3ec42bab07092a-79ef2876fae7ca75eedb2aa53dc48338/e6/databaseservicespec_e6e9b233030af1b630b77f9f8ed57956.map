{"file":"/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/core/database/database.service.spec.ts","mappings":"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","names":[],"sources":["/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/core/database/database.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { DatabaseService } from './database.service';\n// import type { Database as BetterSqlite3Database } from 'better-sqlite3';\n\ntype MockDatabase = {\n  pragma: jest.Mock;\n  exec: jest.Mock;\n  prepare: jest.Mock;\n  close: jest.Mock;\n  transaction: jest.Mock;\n};\n\nconst mockDb: MockDatabase = {\n  pragma: jest.fn(),\n  exec: jest.fn(),\n  prepare: jest.fn(),\n  close: jest.fn(),\n  transaction: jest.fn(),\n};\n\n// better-sqlite3のモック\njest.mock('better-sqlite3', () => {\n  return jest.fn().mockImplementation(() => mockDb);\n});\n\n// fsのモック\njest.mock('fs', () => ({\n  readFileSync: jest.fn().mockReturnValue('CREATE TABLE test;'),\n}));\n\ndescribe('DatabaseService', () => {\n  let service: DatabaseService;\n\n  beforeEach(async () => {\n    // モックをリセット\n    jest.clearAllMocks();\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [DatabaseService],\n    }).compile();\n\n    service = module.get<DatabaseService>(DatabaseService);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('onModuleInit', () => {\n    it('データベース接続を確立し、スキーマを初期化すること', () => {\n      // onModuleInitを呼び出す\n      service.onModuleInit();\n\n      const Database = require('better-sqlite3');\n      const fs = require('fs');\n      \n      expect(Database).toHaveBeenCalledWith(\n        expect.stringContaining('sokubutsu.sqlite'),\n      );\n      expect(mockDb.pragma).toHaveBeenCalledWith('journal_mode = WAL');\n      expect(fs.readFileSync).toHaveBeenCalledWith(\n        expect.stringContaining('schema.sql'),\n        'utf8',\n      );\n      expect(mockDb.exec).toHaveBeenCalledWith('CREATE TABLE test;');\n    });\n  });\n\n  describe('onModuleDestroy', () => {\n    it('データベース接続を閉じること', () => {\n      // まずonModuleInitを呼び出してdbを初期化\n      service.onModuleInit();\n      \n      // その後でonModuleDestroyを呼び出す\n      service.onModuleDestroy();\n      expect(mockDb.close).toHaveBeenCalled();\n    });\n  });\n\n  describe('query', () => {\n    it('複数の結果を返すこと', () => {\n      // 先にonModuleInitを呼び出してdbを初期化\n      service.onModuleInit();\n      \n      const mockStmt = {\n        all: jest.fn().mockReturnValue([{ id: 1 }, { id: 2 }]),\n      };\n      mockDb.prepare.mockReturnValue(mockStmt);\n\n      const result = service.query('SELECT * FROM test WHERE active = ?', [\n        true,\n      ]);\n\n      expect(mockDb.prepare).toHaveBeenCalledWith(\n        'SELECT * FROM test WHERE active = ?',\n      );\n      expect(mockStmt.all).toHaveBeenCalledWith(true);\n      expect(result).toEqual([{ id: 1 }, { id: 2 }]);\n    });\n  });\n\n  describe('findOne', () => {\n    beforeEach(() => {\n      // 各テストの前にonModuleInitを呼び出してdbを初期化\n      service.onModuleInit();\n    });\n    \n    it('単一の結果を返すこと', () => {\n      const mockStmt = {\n        get: jest.fn().mockReturnValue({ id: 1, name: 'test' }),\n      };\n      mockDb.prepare.mockReturnValue(mockStmt);\n\n      const result = service.findOne('SELECT * FROM test WHERE id = ?', [1]);\n\n      expect(mockDb.prepare).toHaveBeenCalledWith(\n        'SELECT * FROM test WHERE id = ?',\n      );\n      expect(mockStmt.get).toHaveBeenCalledWith(1);\n      expect(result).toEqual({ id: 1, name: 'test' });\n    });\n\n    it('結果がない場合はundefinedを返すこと', () => {\n      const mockStmt = {\n        get: jest.fn().mockReturnValue(undefined),\n      };\n      mockDb.prepare.mockReturnValue(mockStmt);\n\n      const result = service.findOne('SELECT * FROM test WHERE id = ?', [999]);\n\n      expect(result).toBeUndefined();\n    });\n  });\n\n  describe('execute', () => {\n    it('INSERT/UPDATE/DELETE操作を実行すること', () => {\n      // 先にonModuleInitを呼び出してdbを初期化\n      service.onModuleInit();\n      \n      const mockRunResult = { changes: 1, lastInsertRowid: 123 };\n      const mockStmt = {\n        run: jest.fn().mockReturnValue(mockRunResult),\n      };\n      mockDb.prepare.mockReturnValue(mockStmt);\n\n      const result = service.execute('INSERT INTO test (name) VALUES (?)', [\n        'test',\n      ]);\n\n      expect(mockDb.prepare).toHaveBeenCalledWith(\n        'INSERT INTO test (name) VALUES (?)',\n      );\n      expect(mockStmt.run).toHaveBeenCalledWith('test');\n      expect(result).toEqual(mockRunResult);\n    });\n  });\n\n  describe('transaction', () => {\n    it('トランザクション内で関数を実行すること', () => {\n      // 先にonModuleInitを呼び出してdbを初期化\n      service.onModuleInit();\n      \n      const mockFn = jest.fn().mockReturnValue('result');\n      const mockTransaction = jest.fn().mockReturnValue('result');\n      mockDb.transaction.mockReturnValue(mockTransaction);\n\n      const result = service.transaction(mockFn);\n\n      expect(mockDb.transaction).toHaveBeenCalledWith(mockFn);\n      expect(mockTransaction).toHaveBeenCalled();\n      expect(result).toBe('result');\n    });\n  });\n});\n"],"version":3}