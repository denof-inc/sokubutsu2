a4875a8460b066ce952fc282b0db42ea
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('axios');
jest.mock('cheerio');
jest.mock('jsdom');
jest.mock('playwright');
const testing_1 = require("@nestjs/testing");
const scraping_service_1 = require("./scraping.service");
const axios_1 = __importDefault(require("axios"));
const cheerio = __importStar(require("cheerio"));
const jsdom_1 = require("jsdom");
const playwright_1 = require("playwright");
describe('ScrapingService', () => {
    let service;
    const mockUrl = 'https://example.com';
    const mockSelector = '#test-selector';
    const mockContent = '<div>Test Content</div>';
    const _mockHash = 'mocked-hash';
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [scraping_service_1.ScrapingService],
        }).compile();
        service = module.get(scraping_service_1.ScrapingService);
        // クリーンアップ
        jest.clearAllMocks();
    });
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    describe('scrapeAndGetHash', () => {
        it('HTTP + Cheerioで成功する場合', async () => {
            // Axiosのモック
            axios_1.default.get.mockResolvedValue({
                data: '<html><body><div id="test-selector">Test Content</div></body></html>',
            });
            // Cheerioのモック
            const mockElement = {
                html: jest.fn().mockReturnValue(mockContent),
                length: 1,
            };
            const mockCheerio = {
                load: jest.fn().mockReturnValue(jest.fn().mockReturnValue(mockElement)),
            };
            cheerio.load = mockCheerio.load;
            const result = await service.scrapeAndGetHash(mockUrl, mockSelector);
            expect(result).toBeDefined();
            expect(axios_1.default.get).toHaveBeenCalledWith(mockUrl, expect.objectContaining({
                headers: expect.objectContaining({
                    'User-Agent': expect.any(String),
                }),
            }));
        });
        it('HTTP失敗時はJSDOMにフォールバック', async () => {
            // Axiosを失敗させる
            axios_1.default.get.mockRejectedValue(new Error('Network error'));
            // JSDOMのモック
            const mockElement = { innerHTML: mockContent };
            const mockDocument = {
                querySelector: jest.fn().mockReturnValue(mockElement),
            };
            const mockWindow = { document: mockDocument, close: jest.fn() };
            jsdom_1.JSDOM.fromURL.mockResolvedValue({ window: mockWindow });
            const result = await service.scrapeAndGetHash(mockUrl, mockSelector);
            expect(result).toBeDefined();
            expect(jsdom_1.JSDOM.fromURL).toHaveBeenCalled();
        });
        it('すべての手法が失敗した場合はnullを返す', async () => {
            // すべて失敗させる
            axios_1.default.get.mockRejectedValue(new Error('HTTP failed'));
            jsdom_1.JSDOM.fromURL.mockRejectedValue(new Error('JSDOM failed'));
            const mockBrowser = {
                newPage: jest.fn().mockRejectedValue(new Error('Playwright failed')),
                close: jest.fn(),
            };
            playwright_1.chromium.launch.mockResolvedValue(mockBrowser);
            const result = await service.scrapeAndGetHash(mockUrl, mockSelector);
            expect(result).toBeNull();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,