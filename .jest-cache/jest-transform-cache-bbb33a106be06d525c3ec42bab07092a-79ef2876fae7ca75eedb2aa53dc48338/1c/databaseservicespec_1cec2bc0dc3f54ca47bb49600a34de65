e4770f4f1c1022cc48e38d928f270918
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// import type { Database as BetterSqlite3Database } from 'better-sqlite3';
jest.mock('better-sqlite3');
jest.mock('fs');
const testing_1 = require("@nestjs/testing");
const database_service_1 = require("./database.service");
describe('DatabaseService', () => {
    let service;
    let mockDb;
    beforeEach(async () => {
        mockDb = {
            pragma: jest.fn(),
            exec: jest.fn(),
            prepare: jest.fn(),
            close: jest.fn(),
            transaction: jest.fn(),
        };
        jest.doMock('better-sqlite3', () => jest.fn(() => mockDb));
        jest.doMock('fs', () => ({
            readFileSync: jest.fn().mockReturnValue('CREATE TABLE test;'),
        }));
        const module = await testing_1.Test.createTestingModule({
            providers: [database_service_1.DatabaseService],
        }).compile();
        service = module.get(database_service_1.DatabaseService);
        service.onModuleInit();
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    describe('onModuleInit', () => {
        it('データベース接続を確立し、スキーマを初期化すること', () => {
            // Mocks are already set up in beforeEach
            const Database = jest.requireMock('better-sqlite3');
            const fs = jest.requireMock('fs');
            expect(Database).toHaveBeenCalledWith(expect.stringContaining('sokubutsu.sqlite'));
            expect(mockDb.pragma).toHaveBeenCalledWith('journal_mode = WAL');
            expect(fs.readFileSync).toHaveBeenCalledWith(expect.stringContaining('schema.sql'), 'utf8');
            expect(mockDb.exec).toHaveBeenCalledWith('CREATE TABLE test;');
        });
    });
    describe('onModuleDestroy', () => {
        it('データベース接続を閉じること', () => {
            service.onModuleDestroy();
            expect(mockDb.close).toHaveBeenCalled();
        });
    });
    describe('query', () => {
        it('複数の結果を返すこと', () => {
            const mockStmt = {
                all: jest.fn().mockReturnValue([{ id: 1 }, { id: 2 }]),
            };
            mockDb.prepare.mockReturnValue(mockStmt);
            const result = service.query('SELECT * FROM test WHERE active = ?', [
                true,
            ]);
            expect(mockDb.prepare).toHaveBeenCalledWith('SELECT * FROM test WHERE active = ?');
            expect(mockStmt.all).toHaveBeenCalledWith(true);
            expect(result).toEqual([{ id: 1 }, { id: 2 }]);
        });
    });
    describe('findOne', () => {
        it('単一の結果を返すこと', () => {
            const mockStmt = {
                get: jest.fn().mockReturnValue({ id: 1, name: 'test' }),
            };
            mockDb.prepare.mockReturnValue(mockStmt);
            const result = service.findOne('SELECT * FROM test WHERE id = ?', [1]);
            expect(mockDb.prepare).toHaveBeenCalledWith('SELECT * FROM test WHERE id = ?');
            expect(mockStmt.get).toHaveBeenCalledWith(1);
            expect(result).toEqual({ id: 1, name: 'test' });
        });
        it('結果がない場合はundefinedを返すこと', () => {
            const mockStmt = {
                get: jest.fn().mockReturnValue(undefined),
            };
            mockDb.prepare.mockReturnValue(mockStmt);
            const result = service.findOne('SELECT * FROM test WHERE id = ?', [999]);
            expect(result).toBeUndefined();
        });
    });
    describe('execute', () => {
        it('INSERT/UPDATE/DELETE操作を実行すること', () => {
            const mockRunResult = { changes: 1, lastInsertRowid: 123 };
            const mockStmt = {
                run: jest.fn().mockReturnValue(mockRunResult),
            };
            mockDb.prepare.mockReturnValue(mockStmt);
            const result = service.execute('INSERT INTO test (name) VALUES (?)', [
                'test',
            ]);
            expect(mockDb.prepare).toHaveBeenCalledWith('INSERT INTO test (name) VALUES (?)');
            expect(mockStmt.run).toHaveBeenCalledWith('test');
            expect(result).toEqual(mockRunResult);
        });
    });
    describe('transaction', () => {
        it('トランザクション内で関数を実行すること', () => {
            const mockFn = jest.fn().mockReturnValue('result');
            const mockTransaction = jest.fn().mockReturnValue('result');
            mockDb.transaction.mockReturnValue(mockTransaction);
            const result = service.transaction(mockFn);
            expect(mockDb.transaction).toHaveBeenCalledWith(mockFn);
            expect(mockTransaction).toHaveBeenCalled();
            expect(result).toBe('result');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,