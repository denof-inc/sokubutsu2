{"file":"/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/common/guards/telegram-auth.guard.ts","mappings":"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","names":[],"sources":["/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/common/guards/telegram-auth.guard.ts"],"sourcesContent":["import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n  Logger,\n} from '@nestjs/common';\nimport { AuthService } from '../../core/auth/auth.service';\nimport { TelegramUpdate } from '../interfaces';\n\n@Injectable()\nexport class TelegramAuthGuard implements CanActivate {\n  private readonly logger = new Logger(TelegramAuthGuard.name);\n\n  constructor(private readonly authService: AuthService) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const request = context.switchToHttp().getRequest();\n    const update: TelegramUpdate = request.body as TelegramUpdate;\n\n    // Telegramメッセージの検証\n    if (!update.message?.from) {\n      this.logger.warn('Invalid Telegram update structure');\n      throw new UnauthorizedException('Invalid request');\n    }\n\n    const telegramId = update.message.from.id.toString();\n    const telegramUser = update.message.from;\n\n    try {\n      // ユーザー認証\n      const user = await this.authService.getUser(telegramId);\n\n      if (!user) {\n        // 新規ユーザーの場合、/startコマンド以外は拒否\n        const isStartCommand = update.message.text === '/start';\n        if (!isStartCommand) {\n          this.logger.warn(\n            `Unregistered user ${telegramId} tried to access without /start`,\n          );\n          throw new UnauthorizedException('Please use /start command first');\n        }\n\n        // /startコマンドの場合は認証をスキップ（ハンドラーで処理）\n        request.telegramUser = telegramUser;\n        request.isNewUser = true;\n        return true;\n      }\n\n      // アクティブチェック\n      if (!user.isActive) {\n        this.logger.warn(`Inactive user ${telegramId} tried to access`);\n        throw new UnauthorizedException('Your account is inactive');\n      }\n\n      // 最終アクティブ時刻を更新（非同期で実行）\n      void this.authService.getUser(telegramId).then((user) => {\n        if (user) {\n          // バックグラウンドで更新\n          this.authService\n            .authenticateTelegramUser(telegramUser)\n            .catch((err: unknown) => {\n              this.logger.error(\n                `Failed to update last active for ${telegramId}:`,\n                err,\n              );\n            });\n        }\n      });\n\n      // リクエストにユーザー情報を追加\n      request.user = user;\n      request.telegramUser = telegramUser;\n      request.isNewUser = false;\n\n      return true;\n    } catch (error) {\n      if (error instanceof UnauthorizedException) {\n        throw error;\n      }\n\n      this.logger.error(`Authentication error for ${telegramId}:`, error);\n      throw new UnauthorizedException('Authentication failed');\n    }\n  }\n}\n"],"version":3}