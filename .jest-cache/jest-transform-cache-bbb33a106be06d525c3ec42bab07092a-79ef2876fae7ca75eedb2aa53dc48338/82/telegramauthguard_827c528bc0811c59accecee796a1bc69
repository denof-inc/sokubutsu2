70ce36b67c5cb6b65fb1be5f5f08ef09
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TelegramAuthGuard_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramAuthGuard = void 0;
const common_1 = require("@nestjs/common");
const auth_service_1 = require("../../core/auth/auth.service");
let TelegramAuthGuard = TelegramAuthGuard_1 = class TelegramAuthGuard {
    authService;
    logger = new common_1.Logger(TelegramAuthGuard_1.name);
    constructor(authService) {
        this.authService = authService;
    }
    async canActivate(context) {
        const request = context.switchToHttp().getRequest();
        const update = request.body;
        // Telegramメッセージの検証
        if (!update.message?.from) {
            this.logger.warn('Invalid Telegram update structure');
            throw new common_1.UnauthorizedException('Invalid request');
        }
        const telegramId = update.message.from.id.toString();
        const telegramUser = update.message.from;
        try {
            // ユーザー認証
            const user = await this.authService.getUser(telegramId);
            if (!user) {
                // 新規ユーザーの場合、/startコマンド以外は拒否
                const isStartCommand = update.message.text === '/start';
                if (!isStartCommand) {
                    this.logger.warn(`Unregistered user ${telegramId} tried to access without /start`);
                    throw new common_1.UnauthorizedException('Please use /start command first');
                }
                // /startコマンドの場合は認証をスキップ（ハンドラーで処理）
                request.telegramUser = telegramUser;
                request.isNewUser = true;
                return true;
            }
            // アクティブチェック
            if (!user.isActive) {
                this.logger.warn(`Inactive user ${telegramId} tried to access`);
                throw new common_1.UnauthorizedException('Your account is inactive');
            }
            // 最終アクティブ時刻を更新（非同期で実行）
            void this.authService.getUser(telegramId).then((user) => {
                if (user) {
                    // バックグラウンドで更新
                    this.authService
                        .authenticateTelegramUser(telegramUser)
                        .catch((err) => {
                        this.logger.error(`Failed to update last active for ${telegramId}:`, err);
                    });
                }
            });
            // リクエストにユーザー情報を追加
            request.user = user;
            request.telegramUser = telegramUser;
            request.isNewUser = false;
            return true;
        }
        catch (error) {
            if (error instanceof common_1.UnauthorizedException) {
                throw error;
            }
            this.logger.error(`Authentication error for ${telegramId}:`, error);
            throw new common_1.UnauthorizedException('Authentication failed');
        }
    }
};
exports.TelegramAuthGuard = TelegramAuthGuard;
exports.TelegramAuthGuard = TelegramAuthGuard = TelegramAuthGuard_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [auth_service_1.AuthService])
], TelegramAuthGuard);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3R0dGVsYS9Eb2N1bWVudHMvV29yay9kZW5vZi93b3Jrcy8yNTA1Mjlzb2t1YnV0c3UvZGV2Mi9zcmMvY29tbW9uL2d1YXJkcy90ZWxlZ3JhbS1hdXRoLmd1YXJkLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FNd0I7QUFDeEIsK0RBQTJEO0FBSXBELElBQU0saUJBQWlCLHlCQUF2QixNQUFNLGlCQUFpQjtJQUdDO0lBRlosTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLG1CQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTdELFlBQTZCLFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO0lBQUcsQ0FBQztJQUV6RCxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQXlCO1FBQ3pDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNwRCxNQUFNLE1BQU0sR0FBbUIsT0FBTyxDQUFDLElBQXNCLENBQUM7UUFFOUQsbUJBQW1CO1FBQ25CLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO1lBQzFCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLG1DQUFtQyxDQUFDLENBQUM7WUFDdEQsTUFBTSxJQUFJLDhCQUFxQixDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDckQsQ0FBQztRQUVELE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNyRCxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztRQUV6QyxJQUFJLENBQUM7WUFDSCxTQUFTO1lBQ1QsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUV4RCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ1YsNEJBQTRCO2dCQUM1QixNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxRQUFRLENBQUM7Z0JBQ3hELElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztvQkFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ2QscUJBQXFCLFVBQVUsaUNBQWlDLENBQ2pFLENBQUM7b0JBQ0YsTUFBTSxJQUFJLDhCQUFxQixDQUFDLGlDQUFpQyxDQUFDLENBQUM7Z0JBQ3JFLENBQUM7Z0JBRUQsa0NBQWtDO2dCQUNsQyxPQUFPLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztnQkFDcEMsT0FBTyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7Z0JBQ3pCLE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQztZQUVELFlBQVk7WUFDWixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUNuQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsVUFBVSxrQkFBa0IsQ0FBQyxDQUFDO2dCQUNoRSxNQUFNLElBQUksOEJBQXFCLENBQUMsMEJBQTBCLENBQUMsQ0FBQztZQUM5RCxDQUFDO1lBRUQsdUJBQXVCO1lBQ3ZCLEtBQUssSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ3RELElBQUksSUFBSSxFQUFFLENBQUM7b0JBQ1QsY0FBYztvQkFDZCxJQUFJLENBQUMsV0FBVzt5QkFDYix3QkFBd0IsQ0FBQyxZQUFZLENBQUM7eUJBQ3RDLEtBQUssQ0FBQyxDQUFDLEdBQVksRUFBRSxFQUFFO3dCQUN0QixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDZixvQ0FBb0MsVUFBVSxHQUFHLEVBQ2pELEdBQUcsQ0FDSixDQUFDO29CQUNKLENBQUMsQ0FBQyxDQUFDO2dCQUNQLENBQUM7WUFDSCxDQUFDLENBQUMsQ0FBQztZQUVILGtCQUFrQjtZQUNsQixPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztZQUNwQixPQUFPLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztZQUNwQyxPQUFPLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztZQUUxQixPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsSUFBSSxLQUFLLFlBQVksOEJBQXFCLEVBQUUsQ0FBQztnQkFDM0MsTUFBTSxLQUFLLENBQUM7WUFDZCxDQUFDO1lBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLFVBQVUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3BFLE1BQU0sSUFBSSw4QkFBcUIsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQzNELENBQUM7SUFDSCxDQUFDO0NBQ0YsQ0FBQTtBQTFFWSw4Q0FBaUI7NEJBQWpCLGlCQUFpQjtJQUQ3QixJQUFBLG1CQUFVLEdBQUU7cUNBSStCLDBCQUFXO0dBSDFDLGlCQUFpQixDQTBFN0IiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3R0dGVsYS9Eb2N1bWVudHMvV29yay9kZW5vZi93b3Jrcy8yNTA1Mjlzb2t1YnV0c3UvZGV2Mi9zcmMvY29tbW9uL2d1YXJkcy90ZWxlZ3JhbS1hdXRoLmd1YXJkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENhbkFjdGl2YXRlLFxuICBFeGVjdXRpb25Db250ZXh0LFxuICBJbmplY3RhYmxlLFxuICBVbmF1dGhvcml6ZWRFeGNlcHRpb24sXG4gIExvZ2dlcixcbn0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xuaW1wb3J0IHsgQXV0aFNlcnZpY2UgfSBmcm9tICcuLi8uLi9jb3JlL2F1dGgvYXV0aC5zZXJ2aWNlJztcbmltcG9ydCB7IFRlbGVncmFtVXBkYXRlIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUZWxlZ3JhbUF1dGhHdWFyZCBpbXBsZW1lbnRzIENhbkFjdGl2YXRlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXIgPSBuZXcgTG9nZ2VyKFRlbGVncmFtQXV0aEd1YXJkLm5hbWUpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYXV0aFNlcnZpY2U6IEF1dGhTZXJ2aWNlKSB7fVxuXG4gIGFzeW5jIGNhbkFjdGl2YXRlKGNvbnRleHQ6IEV4ZWN1dGlvbkNvbnRleHQpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gY29udGV4dC5zd2l0Y2hUb0h0dHAoKS5nZXRSZXF1ZXN0KCk7XG4gICAgY29uc3QgdXBkYXRlOiBUZWxlZ3JhbVVwZGF0ZSA9IHJlcXVlc3QuYm9keSBhcyBUZWxlZ3JhbVVwZGF0ZTtcblxuICAgIC8vIFRlbGVncmFt44Oh44OD44K744O844K444Gu5qSc6Ki8XG4gICAgaWYgKCF1cGRhdGUubWVzc2FnZT8uZnJvbSkge1xuICAgICAgdGhpcy5sb2dnZXIud2FybignSW52YWxpZCBUZWxlZ3JhbSB1cGRhdGUgc3RydWN0dXJlJyk7XG4gICAgICB0aHJvdyBuZXcgVW5hdXRob3JpemVkRXhjZXB0aW9uKCdJbnZhbGlkIHJlcXVlc3QnKTtcbiAgICB9XG5cbiAgICBjb25zdCB0ZWxlZ3JhbUlkID0gdXBkYXRlLm1lc3NhZ2UuZnJvbS5pZC50b1N0cmluZygpO1xuICAgIGNvbnN0IHRlbGVncmFtVXNlciA9IHVwZGF0ZS5tZXNzYWdlLmZyb207XG5cbiAgICB0cnkge1xuICAgICAgLy8g44Om44O844K244O86KqN6Ki8XG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgdGhpcy5hdXRoU2VydmljZS5nZXRVc2VyKHRlbGVncmFtSWQpO1xuXG4gICAgICBpZiAoIXVzZXIpIHtcbiAgICAgICAgLy8g5paw6KaP44Om44O844K244O844Gu5aC05ZCI44CBL3N0YXJ044Kz44Oe44Oz44OJ5Lul5aSW44Gv5ouS5ZCmXG4gICAgICAgIGNvbnN0IGlzU3RhcnRDb21tYW5kID0gdXBkYXRlLm1lc3NhZ2UudGV4dCA9PT0gJy9zdGFydCc7XG4gICAgICAgIGlmICghaXNTdGFydENvbW1hbmQpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKFxuICAgICAgICAgICAgYFVucmVnaXN0ZXJlZCB1c2VyICR7dGVsZWdyYW1JZH0gdHJpZWQgdG8gYWNjZXNzIHdpdGhvdXQgL3N0YXJ0YCxcbiAgICAgICAgICApO1xuICAgICAgICAgIHRocm93IG5ldyBVbmF1dGhvcml6ZWRFeGNlcHRpb24oJ1BsZWFzZSB1c2UgL3N0YXJ0IGNvbW1hbmQgZmlyc3QnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIC9zdGFydOOCs+ODnuODs+ODieOBruWgtOWQiOOBr+iqjeiovOOCkuOCueOCreODg+ODl++8iOODj+ODs+ODieODqeODvOOBp+WHpueQhu+8iVxuICAgICAgICByZXF1ZXN0LnRlbGVncmFtVXNlciA9IHRlbGVncmFtVXNlcjtcbiAgICAgICAgcmVxdWVzdC5pc05ld1VzZXIgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8g44Ki44Kv44OG44Kj44OW44OB44Kn44OD44KvXG4gICAgICBpZiAoIXVzZXIuaXNBY3RpdmUpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybihgSW5hY3RpdmUgdXNlciAke3RlbGVncmFtSWR9IHRyaWVkIHRvIGFjY2Vzc2ApO1xuICAgICAgICB0aHJvdyBuZXcgVW5hdXRob3JpemVkRXhjZXB0aW9uKCdZb3VyIGFjY291bnQgaXMgaW5hY3RpdmUnKTtcbiAgICAgIH1cblxuICAgICAgLy8g5pyA57WC44Ki44Kv44OG44Kj44OW5pmC5Yi744KS5pu05paw77yI6Z2e5ZCM5pyf44Gn5a6f6KGM77yJXG4gICAgICB2b2lkIHRoaXMuYXV0aFNlcnZpY2UuZ2V0VXNlcih0ZWxlZ3JhbUlkKS50aGVuKCh1c2VyKSA9PiB7XG4gICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgLy8g44OQ44OD44Kv44Kw44Op44Km44Oz44OJ44Gn5pu05pawXG4gICAgICAgICAgdGhpcy5hdXRoU2VydmljZVxuICAgICAgICAgICAgLmF1dGhlbnRpY2F0ZVRlbGVncmFtVXNlcih0ZWxlZ3JhbVVzZXIpXG4gICAgICAgICAgICAuY2F0Y2goKGVycjogdW5rbm93bikgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihcbiAgICAgICAgICAgICAgICBgRmFpbGVkIHRvIHVwZGF0ZSBsYXN0IGFjdGl2ZSBmb3IgJHt0ZWxlZ3JhbUlkfTpgLFxuICAgICAgICAgICAgICAgIGVycixcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8g44Oq44Kv44Ko44K544OI44Gr44Om44O844K244O85oOF5aCx44KS6L+95YqgXG4gICAgICByZXF1ZXN0LnVzZXIgPSB1c2VyO1xuICAgICAgcmVxdWVzdC50ZWxlZ3JhbVVzZXIgPSB0ZWxlZ3JhbVVzZXI7XG4gICAgICByZXF1ZXN0LmlzTmV3VXNlciA9IGZhbHNlO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgVW5hdXRob3JpemVkRXhjZXB0aW9uKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihgQXV0aGVudGljYXRpb24gZXJyb3IgZm9yICR7dGVsZWdyYW1JZH06YCwgZXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IFVuYXV0aG9yaXplZEV4Y2VwdGlvbignQXV0aGVudGljYXRpb24gZmFpbGVkJyk7XG4gICAgfVxuICB9XG59XG4iXSwidmVyc2lvbiI6M30=