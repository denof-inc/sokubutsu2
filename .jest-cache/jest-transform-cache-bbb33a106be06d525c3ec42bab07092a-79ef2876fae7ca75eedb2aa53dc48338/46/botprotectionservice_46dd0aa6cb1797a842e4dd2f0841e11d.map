{"file":"/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/features/bot-protection/bot-protection.service.ts","mappings":";;;;;;;;;;;;;AAAA,2CAKwB;AACxB,2CAA6E;AAC7E,mFAA8E;AAC9E,iFAA4E;AAkBrE,IAAM,oBAAoB,4BAA1B,MAAM,oBAAoB;IAWF;IAVZ,MAAM,GAAG,IAAI,eAAM,CAAC,sBAAoB,CAAC,IAAI,CAAC,CAAC;IACxD,OAAO,GAAmB,IAAI,CAAC;IAC/B,QAAQ,GAA6B,IAAI,GAAG,EAAE,CAAC;IAC/C,UAAU,GAA+B,IAAI,GAAG,EAAE,CAAC;IAE1C,kBAAkB,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,MAAM;IAC3C,eAAe,GAAG,CAAC,CAAC;IACpB,aAAa,GAAG,IAAI,CAAC;IACrB,YAAY,GAAG,KAAK,CAAC,CAAC,OAAO;IAE9C,YAA6B,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;IAAG,CAAC;IAE7E,KAAK,CAAC,YAAY;QAChB,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;IACjC,CAAC;IAED,KAAK,CAAC,eAAe;QACnB,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;IACvB,CAAC;IAEO,KAAK,CAAC,iBAAiB;QAC7B,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YAClB,IAAI,CAAC,OAAO,GAAG,MAAM,qBAAQ,CAAC,MAAM,CAAC;gBACnC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,2CAAmB,CAAC,iBAAiB,CAAC,IAAI;aACjD,CAAC,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACzC,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,OAAO;QACnB,oBAAoB;QACpB,KAAK,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC;YACzD,MAAM,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QAChC,CAAC;QACD,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QAEtB,YAAY;QACZ,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;YAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kBAAkB,CAAC,MAAc;QACrC,gBAAgB;QAChB,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAElD,IAAI,eAAe,EAAE,CAAC;YACpB,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,eAAe,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;YAEzE,kBAAkB;YAClB,IAAI,UAAU,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBACzC,eAAe,CAAC,cAAc,GAAG,IAAI,IAAI,EAAE,CAAC;gBAC5C,OAAO,eAAe,CAAC,OAAO,CAAC;YACjC,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,uBAAuB,MAAM,wBAAwB,CAAC,CAAC;gBACxE,MAAM,eAAe,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;gBACtC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC;QAED,cAAc;QACd,OAAO,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IAC7C,CAAC;IAEO,KAAK,CAAC,gBAAgB,CAAC,MAAc;QAC3C,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YAClB,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YAClB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC7C,CAAC;QACD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;YAC5C,SAAS,EAAE,IAAI,CAAC,kBAAkB,EAAE;YACpC,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE;YACvC,MAAM,EAAE,OAAO;YACf,UAAU,EAAE,YAAY;SACzB,CAAC,CAAC;QAEH,MAAM,WAAW,GAAgB;YAC/B,OAAO;YACP,OAAO,EAAE,EAAE;YACX,cAAc,EAAE,IAAI,IAAI,EAAE;YAC1B,UAAU,EAAE,CAAC;YACb,MAAM;SACP,CAAC;QAEF,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QACvC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,2BAA2B,MAAM,EAAE,CAAC,CAAC;QAErD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe,CACnB,SAAiB,EACjB,WAAmB;QAEnB,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC;QAC3C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QACtD,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC;QAErC,IAAI,CAAC;YACH,4BAA4B;YAC5B,MAAM,IAAI,CAAC,IAAI,CAAC,2BAA2B,EAAE;gBAC3C,SAAS,EAAE,aAAa;gBACxB,OAAO,EAAE,KAAK;aACf,CAAC,CAAC;YAEH,+BAA+B;YAC/B,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;YAE1D,uBAAuB;YACvB,MAAM,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE;gBACxC,SAAS,EAAE,aAAa;gBACxB,OAAO,EAAE,KAAK;aACf,CAAC,CAAC;YAEH,eAAe;YACf,2BAA2B;YAC3B,IAAI,SAAS,CAAC;YACd,IAAI,CAAC;gBACH,SAAS,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE;oBACxD,OAAO,EAAE,IAAI;iBACd,CAAC,CAAC;YACL,CAAC;YAAC,MAAM,CAAC;gBACP,YAAY;gBACZ,SAAS,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,oBAAoB,EAAE;oBAC3D,OAAO,EAAE,IAAI;iBACd,CAAC,CAAC;YACL,CAAC;YAED,MAAM,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;YAClD,MAAM,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAE/B,kBAAkB;YAClB,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;YAE1D,4BAA4B;YAC5B,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC;YACjD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,MAAM,CAC7B,SAAS,EACT,CAAC,QAAQ,EAAE,MAAM,EAAE,EAAE;gBACnB,OAAO,QAAQ;qBACZ,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAE,EAAwB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;qBAC/D,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;oBACZ,IAAI,EAAG,EAAwB,CAAC,IAAI;oBACpC,IAAI,EAAE,EAAE,CAAC,WAAW;iBACrB,CAAC,CAAC,CAAC;YACR,CAAC,EACD,YAAY,CACb,CAAC;YAEF,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACvB,MAAM,IAAI,KAAK,CAAC,8BAA8B,YAAY,EAAE,CAAC,CAAC;YAChE,CAAC;YAED,sBAAsB;YACtB,MAAM,IAAI,CAAC,KAAK,CAAC,YAAY,YAAY,IAAI,CAAC,CAAC;YAC/C,MAAM,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;YAE3C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,yBAAyB,SAAS,aAAa,CAAC,CAAC;YACjE,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,mBAAmB,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAC5E,CAAC;YACF,OAAO,KAAK,CAAC;QACf,CAAC;gBAAS,CAAC;YACT,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;QACrB,CAAC;IACH,CAAC;IAED;;OAEG;IACH,gBAAgB,CAAC,IAAY;QAK3B,MAAM,OAAO,GAAG;YACd,cAAc,EAAE,KAAK;YACrB,eAAe,EAAE,KAAK;YACtB,oBAAoB,EAAE,KAAK;SAC5B,CAAC;QAEF,8BAA8B;QAC9B,uBAAuB;QAEvB,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACH,gBAAgB,CAAC,MAAc,EAAE,UAAmB,KAAK;QACvD,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI;YAC/C,MAAM;YACN,UAAU,EAAE,CAAC;YACb,aAAa,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC;YAC1B,YAAY,EAAE,IAAI,CAAC,aAAa;SACjC,CAAC;QAEF,IAAI,OAAO,EAAE,CAAC;YACZ,aAAa;YACb,SAAS,CAAC,UAAU,EAAE,CAAC;YACvB,SAAS,CAAC,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC;YAErC,gBAAgB;YAChB,SAAS,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,CAC/B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,UAAU,CAAC,EACtD,IAAI,CAAC,YAAY,CAClB,CAAC;YAEF,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,4BAA4B,MAAM,KAAK,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAC1E,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,iBAAiB;YACjB,MAAM,kBAAkB,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;YAE1E,IAAI,kBAAkB,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE,CAAC;gBACvC,YAAY;gBACZ,SAAS,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;gBAC7D,SAAS,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,CAC/B,IAAI,CAAC,aAAa,EAClB,SAAS,CAAC,YAAY,GAAG,GAAG,CAC7B,CAAC;YACJ,CAAC;QACH,CAAC;QAED,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QAEvC,WAAW;QACX,MAAM,MAAM,GAAG,SAAS,CAAC,YAAY,GAAG,GAAG,CAAC;QAC5C,OAAO,SAAS,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,MAAM,CAAC;IACjE,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW,CAAC,MAAc;QAC9B,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC1C,IAAI,OAAO,EAAE,CAAC;YACZ,OAAO,CAAC,OAAO,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAClD,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,SAAS,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,gBAAgB,MAAM,EAAE,CAChE,CAAC;QACJ,CAAC;IACH,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,MAAc;QACjC,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC1C,IAAI,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC1C,MAAM,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAClD,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,YAAY,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,gBAAgB,MAAM,EAAE,CACnE,CAAC;QACJ,CAAC;IACH,CAAC;IAEO,kBAAkB;QACxB,MAAM,UAAU,GAAG,2CAAmB,CAAC,UAAU,CAAC;QAClD,OAAO,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;IACnE,CAAC;IAEO,KAAK,CAAC,UAAU;QACtB,MAAM,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,WAAW;QACrD,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;IAC7D,CAAC;IAEO,oBAAoB;QAC1B,OAAO,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,cAAc;IACjD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,4BAA4B,CAChC,IAAU,EACV,SAAiB;QAEjB,IAAI,CAAC;YACH,wBAAwB;YACxB,MAAM,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YAE5D,sBAAsB;YACtB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAE5D,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,0BAA0B;gBAC1B,OAAO,MAAM,IAAI,CAAC,eAAe,CAC/B,SAAS,EACT,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,CACpC,CAAC;YACJ,CAAC;YAED,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,iBAAiB,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAC1E,CAAC;YACF,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,eAAe,CAC3B,IAAU,EACV,SAAiB;QAEjB,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC;QAE3C,IAAI,CAAC;YACH,2BAA2B;YAC3B,MAAM,UAAU,GAAG,WAAW,MAAM,EAAE,CAAC;YACvC,MAAM,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,SAAS,EAAE,aAAa,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;YAC1E,MAAM,IAAI,CAAC,qBAAqB,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;YAEhE,yBAAyB;YACzB,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,MAAM,CACrC,SAAS,EACT,CAAC,KAAK,EAAE,aAAa,EAAE,EAAE;gBACvB,OAAO,KAAK;qBACT,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE;oBACf,MAAM,IAAI,GAAI,IAA0B,CAAC,IAAI,CAAC;oBAC9C,OAAO,CACL,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,IAAI,KAAK,MAAM,CAAC,QAAQ,CAAC,IAAI,CAC9D,CAAC;gBACJ,CAAC,CAAC;qBACD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;qBACX,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAE,IAA0B,CAAC,IAAI,CAAC,CAAC;YACrD,CAAC,EACD,MAAM,CACP,CAAC;YAEF,+BAA+B;YAC/B,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC7B,MAAM,UAAU,GACd,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;gBAClE,MAAM,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;oBAC1B,SAAS,EAAE,aAAa;oBACxB,OAAO,EAAE,KAAK;iBACf,CAAC,CAAC;gBACH,MAAM,IAAI,CAAC,qBAAqB,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;YAClE,CAAC;YAED,sBAAsB;YACtB,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,aAAa,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;YAEzE,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,cAAc,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CACvE,CAAC;YACF,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAEO,mBAAmB,CAAC,SAAiB;QAC3C,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC;QAE3C,MAAM,WAAW,GAA8B;YAC7C,cAAc,EAAE,gBAAgB;YAChC,UAAU,EAAE,eAAe;YAC3B,aAAa,EAAE,eAAe;YAC9B,mBAAmB,EAAE,aAAa;SACnC,CAAC;QAEF,OAAO,WAAW,CAAC,MAAM,CAAC,IAAI,GAAG,MAAM,SAAS,CAAC;IACnD,CAAC;CACF,CAAA;AA3XY,oDAAoB;+BAApB,oBAAoB;IADhC,IAAA,mBAAU,GAAE;qCAYyC,+CAAqB;GAX9D,oBAAoB,CA2XhC","names":[],"sources":["/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/features/bot-protection/bot-protection.service.ts"],"sourcesContent":["import {\n  Injectable,\n  Logger,\n  OnModuleInit,\n  OnModuleDestroy,\n} from '@nestjs/common';\nimport { Browser, BrowserContext, chromium, Cookie, Page } from 'playwright';\nimport { botProtectionConfig } from '../../core/config/bot-protection.config';\nimport { BrowserStealthService } from '../scraping/browser-stealth.service';\n\ninterface SessionData {\n  context: BrowserContext;\n  cookies: Cookie[];\n  lastAccessTime: Date;\n  errorCount: number;\n  domain: string;\n}\n\ninterface RateLimitData {\n  domain: string;\n  errorCount: number;\n  lastErrorTime: Date;\n  currentDelay: number;\n}\n\n@Injectable()\nexport class BotProtectionService implements OnModuleInit, OnModuleDestroy {\n  private readonly logger = new Logger(BotProtectionService.name);\n  private browser: Browser | null = null;\n  private sessions: Map<string, SessionData> = new Map();\n  private rateLimits: Map<string, RateLimitData> = new Map();\n\n  private readonly SESSION_TIMEOUT_MS = 30 * 60 * 1000; // 30分\n  private readonly MAX_ERROR_COUNT = 5;\n  private readonly BASE_DELAY_MS = 1000;\n  private readonly MAX_DELAY_MS = 60000; // 最大1分\n\n  constructor(private readonly browserStealthService: BrowserStealthService) {}\n\n  async onModuleInit() {\n    await this.initializeBrowser();\n  }\n\n  async onModuleDestroy() {\n    await this.cleanup();\n  }\n\n  private async initializeBrowser() {\n    if (!this.browser) {\n      this.browser = await chromium.launch({\n        headless: true,\n        args: botProtectionConfig.playwrightOptions.args,\n      });\n      this.logger.log('Browser initialized');\n    }\n  }\n\n  private async cleanup() {\n    // すべてのセッションをクリーンアップ\n    for (const [_domain, session] of this.sessions.entries()) {\n      await session.context.close();\n    }\n    this.sessions.clear();\n\n    // ブラウザをクローズ\n    if (this.browser) {\n      await this.browser.close();\n      this.browser = null;\n    }\n  }\n\n  /**\n   * ドメイン用のセッションを取得または作成\n   */\n  async getOrCreateSession(domain: string): Promise<BrowserContext> {\n    // 既存のセッションをチェック\n    const existingSession = this.sessions.get(domain);\n\n    if (existingSession) {\n      const sessionAge = Date.now() - existingSession.lastAccessTime.getTime();\n\n      // セッションタイムアウトチェック\n      if (sessionAge < this.SESSION_TIMEOUT_MS) {\n        existingSession.lastAccessTime = new Date();\n        return existingSession.context;\n      } else {\n        this.logger.warn(`Session timeout for ${domain}, creating new session`);\n        await existingSession.context.close();\n        this.sessions.delete(domain);\n      }\n    }\n\n    // 新しいセッションを作成\n    return await this.createNewSession(domain);\n  }\n\n  private async createNewSession(domain: string): Promise<BrowserContext> {\n    if (!this.browser) {\n      await this.initializeBrowser();\n    }\n\n    if (!this.browser) {\n      throw new Error('Browser not initialized');\n    }\n    const context = await this.browser.newContext({\n      userAgent: this.getRandomUserAgent(),\n      viewport: { width: 1920, height: 1080 },\n      locale: 'ja-JP',\n      timezoneId: 'Asia/Tokyo',\n    });\n\n    const sessionData: SessionData = {\n      context,\n      cookies: [],\n      lastAccessTime: new Date(),\n      errorCount: 0,\n      domain,\n    };\n\n    this.sessions.set(domain, sessionData);\n    this.logger.log(`New session created for ${domain}`);\n\n    return context;\n  }\n\n  /**\n   * Google経由でサイトにアクセス\n   */\n  async accessViaGoogle(\n    targetUrl: string,\n    searchQuery: string,\n  ): Promise<boolean> {\n    const domain = new URL(targetUrl).hostname;\n    const context = await this.getOrCreateSession(domain);\n    const page = await context.newPage();\n\n    try {\n      // Step 1: Bot検知テストサイトへのアクセス\n      await page.goto('https://bot.sannysoft.com', {\n        waitUntil: 'networkidle',\n        timeout: 30000,\n      });\n\n      // Step 2: 3秒間の待機（重要：この待機時間は必須）\n      await new Promise((resolve) => setTimeout(resolve, 3000));\n\n      // Step 3: Googleへのアクセス\n      await page.goto('https://www.google.com', {\n        waitUntil: 'networkidle',\n        timeout: 30000,\n      });\n\n      // Step 4: 検索実行\n      // Googleの検索ボックスを複数のセレクタで試行\n      let searchBox;\n      try {\n        searchBox = await page.waitForSelector('input[name=\"q\"]', {\n          timeout: 5000,\n        });\n      } catch {\n        // 別のセレクタを試行\n        searchBox = await page.waitForSelector('textarea[name=\"q\"]', {\n          timeout: 5000,\n        });\n      }\n\n      await searchBox.type(searchQuery, { delay: 100 });\n      await searchBox.press('Enter');\n\n      // Step 5: 検索結果の待機\n      await page.waitForSelector('#search', { timeout: 15000 });\n\n      // Step 6: 目的サイトのリンクを探してクリック\n      const targetDomain = new URL(targetUrl).hostname;\n      const links = await page.$$eval(\n        'a[href]',\n        (elements, domain) => {\n          return elements\n            .filter((el) => (el as HTMLAnchorElement).href.includes(domain))\n            .map((el) => ({\n              href: (el as HTMLAnchorElement).href,\n              text: el.textContent,\n            }));\n        },\n        targetDomain,\n      );\n\n      if (links.length === 0) {\n        throw new Error(`No links found for domain: ${targetDomain}`);\n      }\n\n      // Step 7: 最初のリンクをクリック\n      await page.click(`a[href*=\"${targetDomain}\"]`);\n      await page.waitForLoadState('networkidle');\n\n      this.logger.log(`Successfully accessed ${targetUrl} via Google`);\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Google経由アクセス失敗: ${error instanceof Error ? error.message : String(error)}`,\n      );\n      return false;\n    } finally {\n      await page.close();\n    }\n  }\n\n  /**\n   * Bot検知テスト（3段階）\n   */\n  testBotDetection(_url: string): {\n    httpAccessible: boolean;\n    jsdomAccessible: boolean;\n    playwrightAccessible: boolean;\n  } {\n    const results = {\n      httpAccessible: false,\n      jsdomAccessible: false,\n      playwrightAccessible: false,\n    };\n\n    // この部分はScrapingServiceと連携して実装\n    // 各手法でアクセスを試み、成功/失敗を記録\n\n    return results;\n  }\n\n  /**\n   * レート制限の取得と更新\n   */\n  getAdaptiveDelay(domain: string, isError: boolean = false): number {\n    const rateLimit = this.rateLimits.get(domain) || {\n      domain,\n      errorCount: 0,\n      lastErrorTime: new Date(0),\n      currentDelay: this.BASE_DELAY_MS,\n    };\n\n    if (isError) {\n      // エラーカウントを増加\n      rateLimit.errorCount++;\n      rateLimit.lastErrorTime = new Date();\n\n      // 指数関数的にディレイを増加\n      rateLimit.currentDelay = Math.min(\n        this.BASE_DELAY_MS * Math.pow(2, rateLimit.errorCount),\n        this.MAX_DELAY_MS,\n      );\n\n      this.logger.warn(\n        `Rate limit increased for ${domain}: ${String(rateLimit.currentDelay)}ms`,\n      );\n    } else {\n      // 成功時は徐々にディレイを減少\n      const timeSinceLastError = Date.now() - rateLimit.lastErrorTime.getTime();\n\n      if (timeSinceLastError > 5 * 60 * 1000) {\n        // 5分以上エラーなし\n        rateLimit.errorCount = Math.max(0, rateLimit.errorCount - 1);\n        rateLimit.currentDelay = Math.max(\n          this.BASE_DELAY_MS,\n          rateLimit.currentDelay * 0.8,\n        );\n      }\n    }\n\n    this.rateLimits.set(domain, rateLimit);\n\n    // ランダム性を追加\n    const jitter = rateLimit.currentDelay * 0.2;\n    return rateLimit.currentDelay + (Math.random() - 0.5) * jitter;\n  }\n\n  /**\n   * Cookieの保存と復元\n   */\n  async saveCookies(domain: string): Promise<void> {\n    const session = this.sessions.get(domain);\n    if (session) {\n      session.cookies = await session.context.cookies();\n      this.logger.debug(\n        `Saved ${String(session.cookies.length)} cookies for ${domain}`,\n      );\n    }\n  }\n\n  async restoreCookies(domain: string): Promise<void> {\n    const session = this.sessions.get(domain);\n    if (session && session.cookies.length > 0) {\n      await session.context.addCookies(session.cookies);\n      this.logger.debug(\n        `Restored ${String(session.cookies.length)} cookies for ${domain}`,\n      );\n    }\n  }\n\n  private getRandomUserAgent(): string {\n    const userAgents = botProtectionConfig.userAgents;\n    return userAgents[Math.floor(Math.random() * userAgents.length)];\n  }\n\n  private async humanDelay(): Promise<void> {\n    const delay = 500 + Math.random() * 2000; // 0.5〜2.5秒\n    await new Promise((resolve) => setTimeout(resolve, delay));\n  }\n\n  private getRandomTypingDelay(): number {\n    return 50 + Math.random() * 150; // 50〜200ms/文字\n  }\n\n  /**\n   * 高度なBot対策を実行\n   */\n  async performAdvancedBotProtection(\n    page: Page,\n    targetUrl: string,\n  ): Promise<boolean> {\n    try {\n      // Step 1: ブラウザステルス機能の適用\n      await this.browserStealthService.applyStealthMeasures(page);\n\n      // Step 2: 段階的なサイトアクセス\n      const success = await this.graduatedAccess(page, targetUrl);\n\n      if (!success) {\n        // Step 3: Google経由アクセスの実行\n        return await this.accessViaGoogle(\n          targetUrl,\n          this.generateSearchQuery(targetUrl),\n        );\n      }\n\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `高度なBot対策実行失敗: ${error instanceof Error ? error.message : String(error)}`,\n      );\n      return false;\n    }\n  }\n\n  private async graduatedAccess(\n    page: Page,\n    targetUrl: string,\n  ): Promise<boolean> {\n    const domain = new URL(targetUrl).hostname;\n\n    try {\n      // Step 1: ドメインのトップページにアクセス\n      const topPageUrl = `https://${domain}`;\n      await page.goto(topPageUrl, { waitUntil: 'networkidle', timeout: 30000 });\n      await this.browserStealthService.simulateHumanInteraction(page);\n\n      // Step 2: サイト内の別ページにアクセス\n      const internalLinks = await page.$$eval(\n        'a[href]',\n        (links, currentDomain) => {\n          return links\n            .filter((link) => {\n              const href = (link as HTMLAnchorElement).href;\n              return (\n                href.includes(currentDomain) && href !== window.location.href\n              );\n            })\n            .slice(0, 3)\n            .map((link) => (link as HTMLAnchorElement).href);\n        },\n        domain,\n      );\n\n      // 内部リンクが見つかった場合、ランダムに1つ選んでアクセス\n      if (internalLinks.length > 0) {\n        const randomLink =\n          internalLinks[Math.floor(Math.random() * internalLinks.length)];\n        await page.goto(randomLink, {\n          waitUntil: 'networkidle',\n          timeout: 30000,\n        });\n        await this.browserStealthService.simulateHumanInteraction(page);\n      }\n\n      // Step 3: 目的のページにアクセス\n      await page.goto(targetUrl, { waitUntil: 'networkidle', timeout: 30000 });\n\n      return true;\n    } catch (error) {\n      this.logger.warn(\n        `段階的アクセス失敗: ${error instanceof Error ? error.message : String(error)}`,\n      );\n      return false;\n    }\n  }\n\n  private generateSearchQuery(targetUrl: string): string {\n    const domain = new URL(targetUrl).hostname;\n\n    const siteQueries: { [key: string]: string } = {\n      'athome.co.jp': 'アットホーム 賃貸 物件検索',\n      'suumo.jp': 'SUUMO スーモ 不動産',\n      'homes.co.jp': 'ホームズ 賃貸 マンション',\n      'chintai.mynavi.jp': 'マイナビ賃貸 物件情報',\n    };\n\n    return siteQueries[domain] || `${domain} 不動産 物件`;\n  }\n}\n"],"version":3}