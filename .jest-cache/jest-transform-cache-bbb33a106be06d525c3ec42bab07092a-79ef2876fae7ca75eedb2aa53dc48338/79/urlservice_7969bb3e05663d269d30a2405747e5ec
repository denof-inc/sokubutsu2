83cc33203d92d9ed8031e9ad33a38732
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var UrlService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UrlService = void 0;
const common_1 = require("@nestjs/common");
const database_service_1 = require("../../core/database/database.service");
let UrlService = UrlService_1 = class UrlService {
    databaseService;
    logger = new common_1.Logger(UrlService_1.name);
    constructor(databaseService) {
        this.databaseService = databaseService;
    }
    onModuleInit() {
        this.seedInitialData();
    }
    seedInitialData() {
        const testUrlString = 'https://www.athome.co.jp/buy_other/hiroshima/list/?pref=34&cities=hiroshima_naka,hiroshima_higashi,hiroshima_minami,hiroshima_nishi,hiroshima_asaminami,hiroshima_asakita,hiroshima_aki,hiroshima_saeki,kure,takehara,mihara,onomichi,fukuyama,fuchu,miyoshi,shobara,otake,higashihiroshima,hatsukaichi,akitakata,etajima,aki_fuchu,aki_kaita,aki_kumano,aki_saka,yamagata_akiota,yamagata_kitahiroshima,toyota_osakikamijima,sera_sera,jinseki_jinsekikogen&basic=kp401,kp522,kt201,kf201,ke001,kn001,kj001&tsubo=0&tanka=0&kod=&q=1';
        const existingUrl = this.databaseService.findOne('SELECT * FROM urls WHERE url = ?', [testUrlString]);
        if (!existingUrl) {
            this.logger.log('テスト用のURLデータをデータベースに登録します...');
            this.databaseService.execute('INSERT INTO urls (name, url, selector, is_active) VALUES (?, ?, ?, ?)', ['広島県のテスト物件', testUrlString, '#item-list', 1]);
            this.logger.log('テストデータの登録が完了しました。');
        }
    }
    findAllActive() {
        const results = this.databaseService.query('SELECT * FROM urls WHERE is_active = ?', [1]);
        return Promise.resolve(results);
    }
    updateHash(id, hash) {
        this.databaseService.execute('UPDATE urls SET content_hash = ? WHERE id = ?', [hash, id]);
        return Promise.resolve();
    }
};
exports.UrlService = UrlService;
exports.UrlService = UrlService = UrlService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [database_service_1.DatabaseService])
], UrlService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3R0dGVsYS9Eb2N1bWVudHMvV29yay9kZW5vZi93b3Jrcy8yNTA1Mjlzb2t1YnV0c3UvZGV2Mi9zcmMvZG9tYWluL3VybC91cmwuc2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsMkNBQWtFO0FBQ2xFLDJFQUF1RTtBQUloRSxJQUFNLFVBQVUsa0JBQWhCLE1BQU0sVUFBVTtJQUdRO0lBRlosTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLFlBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUV0RCxZQUE2QixlQUFnQztRQUFoQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7SUFBRyxDQUFDO0lBRWpFLFlBQVk7UUFDVixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVPLGVBQWU7UUFDckIsTUFBTSxhQUFhLEdBQ2pCLHVnQkFBdWdCLENBQUM7UUFFMWdCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUM5QyxrQ0FBa0MsRUFDbEMsQ0FBQyxhQUFhLENBQUMsQ0FDRyxDQUFDO1FBRXJCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1lBQy9DLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUMxQix1RUFBdUUsRUFDdkUsQ0FBQyxXQUFXLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FDOUMsQ0FBQztZQUNGLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDdkMsQ0FBQztJQUNILENBQUM7SUFFRCxhQUFhO1FBQ1gsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQ3hDLHdDQUF3QyxFQUN4QyxDQUFDLENBQUMsQ0FBQyxDQUNKLENBQUM7UUFDRixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELFVBQVUsQ0FBQyxFQUFVLEVBQUUsSUFBWTtRQUNqQyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FDMUIsK0NBQStDLEVBQy9DLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUNYLENBQUM7UUFDRixPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMzQixDQUFDO0NBQ0YsQ0FBQTtBQTNDWSxnQ0FBVTtxQkFBVixVQUFVO0lBRHRCLElBQUEsbUJBQVUsR0FBRTtxQ0FJbUMsa0NBQWU7R0FIbEQsVUFBVSxDQTJDdEIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3R0dGVsYS9Eb2N1bWVudHMvV29yay9kZW5vZi93b3Jrcy8yNTA1Mjlzb2t1YnV0c3UvZGV2Mi9zcmMvZG9tYWluL3VybC91cmwuc2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBMb2dnZXIsIE9uTW9kdWxlSW5pdCB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcbmltcG9ydCB7IERhdGFiYXNlU2VydmljZSB9IGZyb20gJy4uLy4uL2NvcmUvZGF0YWJhc2UvZGF0YWJhc2Uuc2VydmljZSc7XG5pbXBvcnQgeyBVcmwgfSBmcm9tICcuL3VybC5pbnRlcmZhY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVXJsU2VydmljZSBpbXBsZW1lbnRzIE9uTW9kdWxlSW5pdCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgbG9nZ2VyID0gbmV3IExvZ2dlcihVcmxTZXJ2aWNlLm5hbWUpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZGF0YWJhc2VTZXJ2aWNlOiBEYXRhYmFzZVNlcnZpY2UpIHt9XG5cbiAgb25Nb2R1bGVJbml0KCkge1xuICAgIHRoaXMuc2VlZEluaXRpYWxEYXRhKCk7XG4gIH1cblxuICBwcml2YXRlIHNlZWRJbml0aWFsRGF0YSgpIHtcbiAgICBjb25zdCB0ZXN0VXJsU3RyaW5nID1cbiAgICAgICdodHRwczovL3d3dy5hdGhvbWUuY28uanAvYnV5X290aGVyL2hpcm9zaGltYS9saXN0Lz9wcmVmPTM0JmNpdGllcz1oaXJvc2hpbWFfbmFrYSxoaXJvc2hpbWFfaGlnYXNoaSxoaXJvc2hpbWFfbWluYW1pLGhpcm9zaGltYV9uaXNoaSxoaXJvc2hpbWFfYXNhbWluYW1pLGhpcm9zaGltYV9hc2FraXRhLGhpcm9zaGltYV9ha2ksaGlyb3NoaW1hX3NhZWtpLGt1cmUsdGFrZWhhcmEsbWloYXJhLG9ub21pY2hpLGZ1a3V5YW1hLGZ1Y2h1LG1peW9zaGksc2hvYmFyYSxvdGFrZSxoaWdhc2hpaGlyb3NoaW1hLGhhdHN1a2FpY2hpLGFraXRha2F0YSxldGFqaW1hLGFraV9mdWNodSxha2lfa2FpdGEsYWtpX2t1bWFubyxha2lfc2FrYSx5YW1hZ2F0YV9ha2lvdGEseWFtYWdhdGFfa2l0YWhpcm9zaGltYSx0b3lvdGFfb3Nha2lrYW1pamltYSxzZXJhX3NlcmEsamluc2VraV9qaW5zZWtpa29nZW4mYmFzaWM9a3A0MDEsa3A1MjIsa3QyMDEsa2YyMDEsa2UwMDEsa24wMDEsa2owMDEmdHN1Ym89MCZ0YW5rYT0wJmtvZD0mcT0xJztcblxuICAgIGNvbnN0IGV4aXN0aW5nVXJsID0gdGhpcy5kYXRhYmFzZVNlcnZpY2UuZmluZE9uZShcbiAgICAgICdTRUxFQ1QgKiBGUk9NIHVybHMgV0hFUkUgdXJsID0gPycsXG4gICAgICBbdGVzdFVybFN0cmluZ10sXG4gICAgKSBhcyBVcmwgfCB1bmRlZmluZWQ7XG5cbiAgICBpZiAoIWV4aXN0aW5nVXJsKSB7XG4gICAgICB0aGlzLmxvZ2dlci5sb2coJ+ODhuOCueODiOeUqOOBrlVSTOODh+ODvOOCv+OCkuODh+ODvOOCv+ODmeODvOOCueOBq+eZu+mMsuOBl+OBvuOBmS4uLicpO1xuICAgICAgdGhpcy5kYXRhYmFzZVNlcnZpY2UuZXhlY3V0ZShcbiAgICAgICAgJ0lOU0VSVCBJTlRPIHVybHMgKG5hbWUsIHVybCwgc2VsZWN0b3IsIGlzX2FjdGl2ZSkgVkFMVUVTICg/LCA/LCA/LCA/KScsXG4gICAgICAgIFsn5bqD5bO255yM44Gu44OG44K544OI54mp5Lu2JywgdGVzdFVybFN0cmluZywgJyNpdGVtLWxpc3QnLCAxXSxcbiAgICAgICk7XG4gICAgICB0aGlzLmxvZ2dlci5sb2coJ+ODhuOCueODiOODh+ODvOOCv+OBrueZu+mMsuOBjOWujOS6huOBl+OBvuOBl+OBn+OAgicpO1xuICAgIH1cbiAgfVxuXG4gIGZpbmRBbGxBY3RpdmUoKTogUHJvbWlzZTxVcmxbXT4ge1xuICAgIGNvbnN0IHJlc3VsdHMgPSB0aGlzLmRhdGFiYXNlU2VydmljZS5xdWVyeTxVcmw+KFxuICAgICAgJ1NFTEVDVCAqIEZST00gdXJscyBXSEVSRSBpc19hY3RpdmUgPSA/JyxcbiAgICAgIFsxXSxcbiAgICApO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0cyk7XG4gIH1cblxuICB1cGRhdGVIYXNoKGlkOiBudW1iZXIsIGhhc2g6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMuZGF0YWJhc2VTZXJ2aWNlLmV4ZWN1dGUoXG4gICAgICAnVVBEQVRFIHVybHMgU0VUIGNvbnRlbnRfaGFzaCA9ID8gV0hFUkUgaWQgPSA/JyxcbiAgICAgIFtoYXNoLCBpZF0sXG4gICAgKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==