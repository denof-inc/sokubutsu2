{"file":"/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/domain/url/url.service.ts","mappings":";;;;;;;;;;;;;AAAA,2CAAkE;AAClE,2EAAuE;AAIhE,IAAM,UAAU,kBAAhB,MAAM,UAAU;IAGQ;IAFZ,MAAM,GAAG,IAAI,eAAM,CAAC,YAAU,CAAC,IAAI,CAAC,CAAC;IAEtD,YAA6B,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;IAAG,CAAC;IAEjE,YAAY;QACV,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAEO,eAAe;QACrB,MAAM,aAAa,GACjB,ugBAAugB,CAAC;QAE1gB,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAC9C,kCAAkC,EAClC,CAAC,aAAa,CAAC,CACG,CAAC;QAErB,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;YAC/C,IAAI,CAAC,eAAe,CAAC,OAAO,CAC1B,uEAAuE,EACvE,CAAC,WAAW,EAAE,aAAa,EAAE,YAAY,EAAE,CAAC,CAAC,CAC9C,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QACvC,CAAC;IACH,CAAC;IAED,aAAa;QACX,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CACxC,wCAAwC,EACxC,CAAC,CAAC,CAAC,CACJ,CAAC;QACF,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC;IAED,UAAU,CAAC,EAAU,EAAE,IAAY;QACjC,IAAI,CAAC,eAAe,CAAC,OAAO,CAC1B,+CAA+C,EAC/C,CAAC,IAAI,EAAE,EAAE,CAAC,CACX,CAAC;QACF,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF,CAAA;AA3CY,gCAAU;qBAAV,UAAU;IADtB,IAAA,mBAAU,GAAE;qCAImC,kCAAe;GAHlD,UAAU,CA2CtB","names":[],"sources":["/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/domain/url/url.service.ts"],"sourcesContent":["import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { DatabaseService } from '../../core/database/database.service';\nimport { Url } from './url.interface';\n\n@Injectable()\nexport class UrlService implements OnModuleInit {\n  private readonly logger = new Logger(UrlService.name);\n\n  constructor(private readonly databaseService: DatabaseService) {}\n\n  onModuleInit() {\n    this.seedInitialData();\n  }\n\n  private seedInitialData() {\n    const testUrlString =\n      'https://www.athome.co.jp/buy_other/hiroshima/list/?pref=34&cities=hiroshima_naka,hiroshima_higashi,hiroshima_minami,hiroshima_nishi,hiroshima_asaminami,hiroshima_asakita,hiroshima_aki,hiroshima_saeki,kure,takehara,mihara,onomichi,fukuyama,fuchu,miyoshi,shobara,otake,higashihiroshima,hatsukaichi,akitakata,etajima,aki_fuchu,aki_kaita,aki_kumano,aki_saka,yamagata_akiota,yamagata_kitahiroshima,toyota_osakikamijima,sera_sera,jinseki_jinsekikogen&basic=kp401,kp522,kt201,kf201,ke001,kn001,kj001&tsubo=0&tanka=0&kod=&q=1';\n\n    const existingUrl = this.databaseService.findOne(\n      'SELECT * FROM urls WHERE url = ?',\n      [testUrlString],\n    ) as Url | undefined;\n\n    if (!existingUrl) {\n      this.logger.log('テスト用のURLデータをデータベースに登録します...');\n      this.databaseService.execute(\n        'INSERT INTO urls (name, url, selector, is_active) VALUES (?, ?, ?, ?)',\n        ['広島県のテスト物件', testUrlString, '#item-list', 1],\n      );\n      this.logger.log('テストデータの登録が完了しました。');\n    }\n  }\n\n  findAllActive(): Promise<Url[]> {\n    const results = this.databaseService.query<Url>(\n      'SELECT * FROM urls WHERE is_active = ?',\n      [1],\n    );\n    return Promise.resolve(results);\n  }\n\n  updateHash(id: number, hash: string): Promise<void> {\n    this.databaseService.execute(\n      'UPDATE urls SET content_hash = ? WHERE id = ?',\n      [hash, id],\n    );\n    return Promise.resolve();\n  }\n}\n"],"version":3}