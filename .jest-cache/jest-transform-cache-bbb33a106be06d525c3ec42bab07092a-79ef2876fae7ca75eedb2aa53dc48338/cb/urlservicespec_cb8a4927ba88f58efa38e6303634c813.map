{"file":"/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/domain/url/url.service.spec.ts","mappings":"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","names":[],"sources":["/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/domain/url/url.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { UrlService } from './url.service';\nimport { DatabaseService } from '../../core/database/database.service';\nimport { Url } from './url.interface';\n\nconst mockDatabaseService = {\n  query: jest.fn(),\n  findOne: jest.fn(),\n  execute: jest.fn(),\n  transaction: jest.fn(),\n};\n\ndescribe('UrlService', () => {\n  let service: UrlService;\n  let databaseService: typeof mockDatabaseService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        UrlService,\n        {\n          provide: DatabaseService,\n          useValue: mockDatabaseService,\n        },\n      ],\n    }).compile();\n\n    service = module.get<UrlService>(UrlService);\n    databaseService = module.get(DatabaseService);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('onModuleInit', () => {\n    it('初期データがない場合、テストデータを登録すること', async () => {\n      databaseService.findOne.mockReturnValue(undefined);\n      databaseService.execute.mockReturnValue({\n        changes: 1,\n        lastInsertRowid: 1,\n      });\n\n      service.onModuleInit();\n\n      expect(databaseService.findOne).toHaveBeenCalledWith(\n        'SELECT * FROM urls WHERE url = ?',\n        [expect.stringContaining('athome.co.jp')],\n      );\n      expect(databaseService.execute).toHaveBeenCalledWith(\n        'INSERT INTO urls (name, url, selector, is_active) VALUES (?, ?, ?, ?)',\n        [\n          '広島県のテスト物件',\n          expect.stringContaining('athome.co.jp'),\n          '#item-list',\n          1,\n        ],\n      );\n    });\n\n    it('初期データが既に存在する場合、新たに登録しないこと', async () => {\n      databaseService.findOne.mockReturnValue({ id: 1 });\n\n      service.onModuleInit();\n\n      expect(databaseService.findOne).toHaveBeenCalled();\n      expect(databaseService.execute).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('findAllActive', () => {\n    it('アクティブなURLの配列を返すこと', async () => {\n      const activeUrls: Url[] = [\n        {\n          id: 1,\n          name: 'URL1',\n          url: 'http://example1.com',\n          selector: '#test',\n          contentHash: null,\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        },\n        {\n          id: 2,\n          name: 'URL2',\n          url: 'http://example2.com',\n          selector: '#test',\n          contentHash: null,\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        },\n      ];\n      databaseService.query.mockResolvedValue(activeUrls);\n\n      const result = await service.findAllActive();\n\n      expect(result).toEqual(activeUrls);\n      expect(databaseService.query).toHaveBeenCalledWith(\n        'SELECT * FROM urls WHERE is_active = ?',\n        [1],\n      );\n    });\n\n    it('アクティブなURLが存在しない場合、空の配列を返すこと', async () => {\n      databaseService.query.mockResolvedValue([]);\n\n      const result = await service.findAllActive();\n\n      expect(result).toEqual([]);\n      expect(databaseService.query).toHaveBeenCalledWith(\n        'SELECT * FROM urls WHERE is_active = ?',\n        [1],\n      );\n    });\n  });\n\n  describe('updateHash', () => {\n    it('指定したIDのURLのハッシュを更新すること', async () => {\n      const updateResult = { changes: 1, lastInsertRowid: 0 };\n      databaseService.execute.mockReturnValue(updateResult);\n\n      await service.updateHash(1, 'newhash123');\n      expect(databaseService.execute).toHaveBeenCalledWith(\n        'UPDATE urls SET content_hash = ? WHERE id = ?',\n        ['newhash123', 1],\n      );\n    });\n\n    it('存在しないIDの場合でも更新を実行すること（現在の実装）', async () => {\n      const updateResult = { changes: 0, lastInsertRowid: 0 };\n      databaseService.execute.mockReturnValue(updateResult);\n\n      await service.updateHash(999, 'newhash123');\n      expect(databaseService.execute).toHaveBeenCalledWith(\n        'UPDATE urls SET content_hash = ? WHERE id = ?',\n        ['newhash123', 999],\n      );\n    });\n  });\n});\n"],"version":3}