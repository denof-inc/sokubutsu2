{"file":"/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/domain/users/users.service.spec.ts","mappings":"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","names":[],"sources":["/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/domain/users/users.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { UsersService } from './users.service';\nimport { User, UserSettings } from './entities/user.entity';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport {\n  ConflictException,\n  NotFoundException,\n  InternalServerErrorException,\n} from '@nestjs/common';\n\ndescribe('UsersService', () => {\n  let service: UsersService;\n  let repository: jest.Mocked<Repository<User>>;\n\n  const mockUser: User = {\n    id: 1,\n    telegramId: '123456789',\n    firstName: 'Test',\n    lastName: 'User',\n    username: 'testuser',\n    isActive: true,\n    languageCode: 'ja',\n    settings: {\n      notifications: { enabled: true, silent: false },\n      language: 'ja',\n    },\n    lastActiveAt: new Date(),\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    fullName: 'Test User',\n    displayName: 'testuser',\n  };\n\n  const mockCreateUserDto: CreateUserDto = {\n    telegramId: '123456789',\n    firstName: 'Test',\n    lastName: 'User',\n    username: 'testuser',\n    languageCode: 'ja',\n    isActive: true,\n    settings: {\n      notifications: { enabled: true, silent: false },\n      language: 'ja',\n    },\n  };\n\n  beforeEach(async () => {\n    const mockRepository = {\n      findOne: jest.fn(),\n      save: jest.fn(),\n      create: jest.fn(),\n      count: jest.fn(),\n      find: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        UsersService,\n        {\n          provide: getRepositoryToken(User),\n          useValue: mockRepository,\n        },\n      ],\n    }).compile();\n\n    service = module.get<UsersService>(UsersService);\n    repository = module.get(getRepositoryToken(User));\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('create', () => {\n    it('should create a new user', async () => {\n      repository.findOne.mockResolvedValue(null);\n      repository.create.mockReturnValue(mockUser);\n      repository.save.mockResolvedValue(mockUser);\n\n      const result = await service.create(mockCreateUserDto);\n\n      expect(result).toEqual(mockUser);\n      expect(repository.findOne).toHaveBeenCalledWith({\n        where: { telegramId: '123456789' },\n      });\n      expect(repository.create).toHaveBeenCalledWith(mockCreateUserDto);\n      expect(repository.save).toHaveBeenCalled();\n    });\n\n    it('should throw ConflictException if user already exists', async () => {\n      repository.findOne.mockResolvedValue(mockUser);\n\n      await expect(service.create(mockCreateUserDto)).rejects.toThrow(\n        ConflictException,\n      );\n    });\n\n    it('should handle database errors', async () => {\n      repository.findOne.mockResolvedValue(null);\n      repository.create.mockReturnValue(mockUser);\n      repository.save.mockRejectedValue(new Error('Database error'));\n\n      await expect(service.create(mockCreateUserDto)).rejects.toThrow(\n        InternalServerErrorException,\n      );\n    });\n  });\n\n  describe('findByTelegramId', () => {\n    it('should find user by telegram ID', async () => {\n      repository.findOne.mockResolvedValue(mockUser);\n\n      const result = await service.findByTelegramId('123456789');\n\n      expect(result).toEqual(mockUser);\n      expect(repository.findOne).toHaveBeenCalledWith({\n        where: { telegramId: '123456789' },\n      });\n    });\n\n    it('should return null if user not found', async () => {\n      repository.findOne.mockResolvedValue(null);\n\n      const result = await service.findByTelegramId('999999999');\n\n      expect(result).toBeNull();\n    });\n\n    it('should handle database errors', async () => {\n      repository.findOne.mockRejectedValue(new Error('Database error'));\n\n      await expect(service.findByTelegramId('123456789')).rejects.toThrow(\n        InternalServerErrorException,\n      );\n    });\n  });\n\n  describe('update', () => {\n    it('should update existing user', async () => {\n      const updateDto: UpdateUserDto = {\n        lastActiveAt: new Date(),\n        isActive: true,\n      };\n\n      repository.findOne.mockResolvedValue(mockUser);\n      const updatedUser = { ...mockUser, ...updateDto } as User;\n      repository.save.mockResolvedValue(updatedUser);\n\n      const result = await service.update('123456789', updateDto);\n\n      expect(result.isActive).toBe(true);\n      expect(repository.save).toHaveBeenCalledWith(\n        expect.objectContaining(updateDto),\n      );\n    });\n\n    it('should throw NotFoundException if user not found', async () => {\n      repository.findOne.mockResolvedValue(null);\n\n      await expect(service.update('999999999', {})).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n\n    it('should handle database errors during update', async () => {\n      repository.findOne.mockResolvedValue(mockUser);\n      repository.save.mockRejectedValue(new Error('Database error'));\n\n      await expect(service.update('123456789', {})).rejects.toThrow(\n        InternalServerErrorException,\n      );\n    });\n  });\n\n  describe('exists', () => {\n    it('should return true if user exists', async () => {\n      repository.count.mockResolvedValue(1);\n\n      const result = await service.exists('123456789');\n\n      expect(result).toBe(true);\n      expect(repository.count).toHaveBeenCalledWith({\n        where: { telegramId: '123456789' },\n      });\n    });\n\n    it('should return false if user does not exist', async () => {\n      repository.count.mockResolvedValue(0);\n\n      const result = await service.exists('999999999');\n\n      expect(result).toBe(false);\n    });\n\n    it('should handle database errors', async () => {\n      repository.count.mockRejectedValue(new Error('Database error'));\n\n      await expect(service.exists('123456789')).rejects.toThrow(\n        InternalServerErrorException,\n      );\n    });\n  });\n\n  describe('deactivate', () => {\n    it('should deactivate active user', async () => {\n      repository.findOne.mockResolvedValue(mockUser);\n      const deactivatedUser = { ...mockUser, isActive: false } as User;\n      repository.save.mockResolvedValue(deactivatedUser);\n\n      await service.deactivate('123456789');\n      expect(repository.save).toHaveBeenCalledWith(\n        expect.objectContaining({ isActive: false }),\n      );\n    });\n\n    it('should throw NotFoundException if user not found', async () => {\n      repository.findOne.mockResolvedValue(null);\n\n      await expect(service.deactivate('999999999')).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n  });\n\n  describe('updateSettings', () => {\n    it('should update user settings', async () => {\n      const newSettings = {\n        notifications: { enabled: false, silent: true },\n        language: 'en',\n      };\n\n      repository.findOne.mockResolvedValue(mockUser);\n      const updatedUser = { ...mockUser, settings: newSettings } as User;\n      repository.save.mockResolvedValue(updatedUser);\n\n      const result = await service.updateSettings('123456789', newSettings);\n\n      expect(result.settings).toEqual(newSettings);\n    });\n\n    it('should merge settings correctly', async () => {\n      const partialSettings: Partial<UserSettings> = {\n        notifications: {\n          enabled: false,\n          silent: false,\n        },\n      };\n\n      repository.findOne.mockResolvedValue(mockUser);\n      const mergedSettings = {\n        ...mockUser,\n        settings: {\n          ...mockUser.settings,\n          notifications: {\n            ...(mockUser.settings?.notifications ?? {}),\n            enabled: false,\n          },\n          language: mockUser.settings?.language ?? 'ja',\n        },\n      } as User;\n      repository.save.mockResolvedValue(mergedSettings);\n\n      const result = await service.updateSettings('123456789', partialSettings);\n\n      expect(result.settings?.notifications.enabled).toBe(false);\n      expect(result.settings?.notifications.silent).toBe(false); // 既存値を保持\n    });\n  });\n\n  describe('findActiveUsers', () => {\n    it('should find active users', async () => {\n      const mockActiveUsers = [mockUser];\n\n      repository.find = jest.fn().mockResolvedValue(mockActiveUsers);\n\n      const result = await service.findActiveUsers();\n\n      expect(result).toEqual(mockActiveUsers);\n      expect(repository.find).toHaveBeenCalledWith({\n        where: { isActive: true },\n      });\n    });\n  });\n});\n"],"version":3}