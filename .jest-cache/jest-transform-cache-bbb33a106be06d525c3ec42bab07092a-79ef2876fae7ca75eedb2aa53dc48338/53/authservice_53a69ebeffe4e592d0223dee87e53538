90081102190c8df258493fe92d40fb3f
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AuthService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthService = void 0;
const common_1 = require("@nestjs/common");
const users_service_1 = require("../../domain/users/users.service");
const exceptions_1 = require("../../common/exceptions");
let AuthService = AuthService_1 = class AuthService {
    usersService;
    logger = new common_1.Logger(AuthService_1.name);
    constructor(usersService) {
        this.usersService = usersService;
    }
    /**
     * Telegram„É¶„Éº„Ç∂„Éº„ÅÆË™çË®º„ÉªÁôªÈå≤Âá¶ÁêÜ
     */
    async authenticateTelegramUser(telegramUser) {
        try {
            // ÂÖ•ÂäõÊ§úË®º
            this.validateTelegramUser(telegramUser);
            const telegramId = telegramUser.id.toString();
            // Êó¢Â≠ò„É¶„Éº„Ç∂„Éº„ÉÅ„Çß„ÉÉ„ÇØ
            let user = await this.usersService.findByTelegramId(telegramId);
            if (user) {
                // Êó¢Â≠ò„É¶„Éº„Ç∂„Éº„ÅÆÂ†¥Âêà„ÄÅÊúÄÁµÇ„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÊôÇÂàª„Å®ÊÉÖÂ†±„ÇíÊõ¥Êñ∞
                this.logger.debug(`Existing user found: ${telegramId}`);
                const updateData = {
                    lastActiveAt: new Date(),
                    username: telegramUser.username,
                    firstName: telegramUser.first_name,
                    lastName: telegramUser.last_name,
                    languageCode: telegramUser.language_code,
                };
                // „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Åß„Å™„ÅÑ„É¶„Éº„Ç∂„Éº„ÅØÂÜçÊúâÂäπÂåñ
                if (!user.isActive) {
                    updateData.isActive = true;
                    this.logger.log(`Reactivating user: ${telegramId}`);
                }
                user = await this.usersService.update(telegramId, updateData);
            }
            else {
                // Êñ∞Ë¶è„É¶„Éº„Ç∂„Éº‰ΩúÊàê
                this.logger.log(`Creating new user: ${telegramId}`);
                const defaultSettings = {
                    notifications: {
                        enabled: true,
                        silent: false,
                    },
                    language: telegramUser.language_code || 'ja',
                };
                const createUserDto = {
                    telegramId,
                    username: telegramUser.username,
                    firstName: telegramUser.first_name,
                    lastName: telegramUser.last_name,
                    languageCode: telegramUser.language_code,
                    isActive: true,
                    settings: defaultSettings,
                };
                user = await this.usersService.create(createUserDto);
            }
            return user;
        }
        catch (error) {
            this.logger.error(`Authentication failed for Telegram user ${String(telegramUser.id)}: ${error instanceof Error ? error.message : String(error)}`, error instanceof Error ? error.stack : undefined);
            if (error instanceof exceptions_1.InvalidTelegramDataException ||
                error instanceof exceptions_1.UserRegistrationException) {
                throw error;
            }
            throw new exceptions_1.TelegramAuthException('Authentication failed');
        }
    }
    /**
     * /start„Ç≥„Éû„É≥„ÉâÂá¶ÁêÜ
     */
    async handleStartCommand(telegramUser) {
        try {
            const telegramId = telegramUser.id.toString();
            const existingUser = await this.usersService.exists(telegramId);
            // „É¶„Éº„Ç∂„ÉºË™çË®º„ÉªÁôªÈå≤
            const user = await this.authenticateTelegramUser(telegramUser);
            // „Ç¶„Çß„É´„Ç´„É†„É°„ÉÉ„Çª„Éº„Ç∏ÁîüÊàê
            const welcomeMessage = this.generateWelcomeMessage(user, !existingUser);
            return {
                user,
                isNewUser: !existingUser,
                welcomeMessage,
            };
        }
        catch (error) {
            this.logger.error(`Start command failed for user ${String(telegramUser.id)}: ${error instanceof Error ? error.message : String(error)}`, error instanceof Error ? error.stack : undefined);
            throw error;
        }
    }
    /**
     * „Ç¶„Çß„É´„Ç´„É†„É°„ÉÉ„Çª„Éº„Ç∏ÁîüÊàê
     */
    generateWelcomeMessage(user, isNewUser) {
        const greeting = isNewUser ? '„ÅØ„Åò„ÇÅ„Åæ„Åó„Å¶' : '„Åä„Åã„Åà„Çä„Å™„Åï„ÅÑ';
        const message = `
${greeting}„ÄÅ${user.fullName}„Åï„ÇìÔºÅüè†

${isNewUser ? '„ÇΩ„ÇØ„Éñ„ÉÑ„Å∏„Çà„ÅÜ„Åì„ÅùÔºÅ' : '„Åæ„Åü„Åä‰ºö„ÅÑ„Åß„Åç„Å¶Â¨â„Åó„ÅÑ„Åß„ÅôÔºÅ'}

üìã ‰ΩøÁî®ÂèØËÉΩ„Å™„Ç≥„Éû„É≥„Éâ:
/add <URL> - Áõ£Ë¶ñURL„ÇíËøΩÂä†
/list - ÁôªÈå≤URL‰∏ÄË¶ß„ÇíË°®Á§∫
/remove <Áï™Âè∑> - URL„ÇíÂâäÈô§
/pause <Áï™Âè∑> - Áõ£Ë¶ñ„Çí‰∏ÄÊôÇÂÅúÊ≠¢
/resume <Áï™Âè∑> - Áõ£Ë¶ñ„ÇíÂÜçÈñã
/status - Áõ£Ë¶ñÁä∂Ê≥Å„ÇíÁ¢∫Ë™ç
/help - „Éò„É´„Éó„ÇíË°®Á§∫

„Åæ„Åö„ÅØ /add „Ç≥„Éû„É≥„Éâ„ÅßÁõ£Ë¶ñ„Åó„Åü„ÅÑÁâ©‰ª∂URL„ÇíÁôªÈå≤„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ
    `.trim();
        return message;
    }
    /**
     * Telegram„É¶„Éº„Ç∂„Éº„Éá„Éº„Çø„ÅÆÊ§úË®º
     */
    validateTelegramUser(telegramUser) {
        if (!telegramUser.id) {
            throw new exceptions_1.InvalidTelegramDataException('Telegram user ID is required');
        }
        if (!telegramUser.first_name ||
            telegramUser.first_name.trim().length === 0) {
            throw new exceptions_1.InvalidTelegramDataException('Telegram user first name is required');
        }
        // ÂêçÂâç„ÅÆÈï∑„ÅïÂà∂Èôê
        if (telegramUser.first_name.length > 255) {
            throw new exceptions_1.InvalidTelegramDataException('First name is too long');
        }
        if (telegramUser.last_name && telegramUser.last_name.length > 255) {
            throw new exceptions_1.InvalidTelegramDataException('Last name is too long');
        }
        if (telegramUser.username && telegramUser.username.length > 255) {
            throw new exceptions_1.InvalidTelegramDataException('Username is too long');
        }
    }
    /**
     * „É¶„Éº„Ç∂„Éº„Åå„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
     */
    async validateUser(telegramId) {
        try {
            const user = await this.usersService.findByTelegramId(telegramId);
            return user?.isActive ?? false;
        }
        catch (error) {
            this.logger.error(`User validation failed for ${telegramId}: ${error instanceof Error ? error.message : String(error)}`);
            return false;
        }
    }
    /**
     * „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæóÔºàË™çË®ºÊ∏à„ÅøÂâçÊèêÔºâ
     */
    async getUser(telegramId) {
        try {
            return await this.usersService.findByTelegramId(telegramId);
        }
        catch (error) {
            this.logger.error(`Failed to get user ${telegramId}: ${error instanceof Error ? error.message : String(error)}`);
            return null;
        }
    }
};
exports.AuthService = AuthService;
exports.AuthService = AuthService = AuthService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [users_service_1.UsersService])
], AuthService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,