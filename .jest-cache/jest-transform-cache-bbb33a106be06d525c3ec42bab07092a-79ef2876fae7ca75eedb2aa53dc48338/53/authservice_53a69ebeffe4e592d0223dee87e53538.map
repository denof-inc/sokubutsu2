{"file":"/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/core/auth/auth.service.ts","mappings":"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","names":[],"sources":["/Users/tttela/Documents/Work/denof/works/250529sokubutsu/dev2/src/core/auth/auth.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { UsersService } from '../../domain/users/users.service';\nimport { User, UserSettings } from '../../domain/users/entities/user.entity';\nimport { TelegramUser, UserUpdateData } from '../../common/interfaces';\nimport { CreateUserDto } from '../../domain/users/dto/create-user.dto';\nimport {\n  TelegramAuthException,\n  UserRegistrationException,\n  InvalidTelegramDataException,\n} from '../../common/exceptions';\n\n@Injectable()\nexport class AuthService {\n  private readonly logger = new Logger(AuthService.name);\n\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Telegram„É¶„Éº„Ç∂„Éº„ÅÆË™çË®º„ÉªÁôªÈå≤Âá¶ÁêÜ\n   */\n  async authenticateTelegramUser(telegramUser: TelegramUser): Promise<User> {\n    try {\n      // ÂÖ•ÂäõÊ§úË®º\n      this.validateTelegramUser(telegramUser);\n\n      const telegramId = telegramUser.id.toString();\n\n      // Êó¢Â≠ò„É¶„Éº„Ç∂„Éº„ÉÅ„Çß„ÉÉ„ÇØ\n      let user = await this.usersService.findByTelegramId(telegramId);\n\n      if (user) {\n        // Êó¢Â≠ò„É¶„Éº„Ç∂„Éº„ÅÆÂ†¥Âêà„ÄÅÊúÄÁµÇ„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÊôÇÂàª„Å®ÊÉÖÂ†±„ÇíÊõ¥Êñ∞\n        this.logger.debug(`Existing user found: ${telegramId}`);\n\n        const updateData: UserUpdateData = {\n          lastActiveAt: new Date(),\n          username: telegramUser.username,\n          firstName: telegramUser.first_name,\n          lastName: telegramUser.last_name,\n          languageCode: telegramUser.language_code,\n        };\n\n        // „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Åß„Å™„ÅÑ„É¶„Éº„Ç∂„Éº„ÅØÂÜçÊúâÂäπÂåñ\n        if (!user.isActive) {\n          updateData.isActive = true;\n          this.logger.log(`Reactivating user: ${telegramId}`);\n        }\n\n        user = await this.usersService.update(telegramId, updateData);\n      } else {\n        // Êñ∞Ë¶è„É¶„Éº„Ç∂„Éº‰ΩúÊàê\n        this.logger.log(`Creating new user: ${telegramId}`);\n\n        const defaultSettings: UserSettings = {\n          notifications: {\n            enabled: true,\n            silent: false,\n          },\n          language: telegramUser.language_code || 'ja',\n        };\n\n        const createUserDto: CreateUserDto = {\n          telegramId,\n          username: telegramUser.username,\n          firstName: telegramUser.first_name,\n          lastName: telegramUser.last_name,\n          languageCode: telegramUser.language_code,\n          isActive: true,\n          settings: defaultSettings,\n        };\n\n        user = await this.usersService.create(createUserDto);\n      }\n\n      return user;\n    } catch (error) {\n      this.logger.error(\n        `Authentication failed for Telegram user ${String(telegramUser.id)}: ${error instanceof Error ? error.message : String(error)}`,\n        error instanceof Error ? error.stack : undefined,\n      );\n\n      if (\n        error instanceof InvalidTelegramDataException ||\n        error instanceof UserRegistrationException\n      ) {\n        throw error;\n      }\n\n      throw new TelegramAuthException('Authentication failed');\n    }\n  }\n\n  /**\n   * /start„Ç≥„Éû„É≥„ÉâÂá¶ÁêÜ\n   */\n  async handleStartCommand(telegramUser: TelegramUser): Promise<{\n    user: User;\n    isNewUser: boolean;\n    welcomeMessage: string;\n  }> {\n    try {\n      const telegramId = telegramUser.id.toString();\n      const existingUser = await this.usersService.exists(telegramId);\n\n      // „É¶„Éº„Ç∂„ÉºË™çË®º„ÉªÁôªÈå≤\n      const user = await this.authenticateTelegramUser(telegramUser);\n\n      // „Ç¶„Çß„É´„Ç´„É†„É°„ÉÉ„Çª„Éº„Ç∏ÁîüÊàê\n      const welcomeMessage = this.generateWelcomeMessage(user, !existingUser);\n\n      return {\n        user,\n        isNewUser: !existingUser,\n        welcomeMessage,\n      };\n    } catch (error) {\n      this.logger.error(\n        `Start command failed for user ${String(telegramUser.id)}: ${error instanceof Error ? error.message : String(error)}`,\n        error instanceof Error ? error.stack : undefined,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * „Ç¶„Çß„É´„Ç´„É†„É°„ÉÉ„Çª„Éº„Ç∏ÁîüÊàê\n   */\n  private generateWelcomeMessage(user: User, isNewUser: boolean): string {\n    const greeting = isNewUser ? '„ÅØ„Åò„ÇÅ„Åæ„Åó„Å¶' : '„Åä„Åã„Åà„Çä„Å™„Åï„ÅÑ';\n\n    const message = `\n${greeting}„ÄÅ${user.fullName}„Åï„ÇìÔºÅüè†\n\n${isNewUser ? '„ÇΩ„ÇØ„Éñ„ÉÑ„Å∏„Çà„ÅÜ„Åì„ÅùÔºÅ' : '„Åæ„Åü„Åä‰ºö„ÅÑ„Åß„Åç„Å¶Â¨â„Åó„ÅÑ„Åß„ÅôÔºÅ'}\n\nüìã ‰ΩøÁî®ÂèØËÉΩ„Å™„Ç≥„Éû„É≥„Éâ:\n/add <URL> - Áõ£Ë¶ñURL„ÇíËøΩÂä†\n/list - ÁôªÈå≤URL‰∏ÄË¶ß„ÇíË°®Á§∫\n/remove <Áï™Âè∑> - URL„ÇíÂâäÈô§\n/pause <Áï™Âè∑> - Áõ£Ë¶ñ„Çí‰∏ÄÊôÇÂÅúÊ≠¢\n/resume <Áï™Âè∑> - Áõ£Ë¶ñ„ÇíÂÜçÈñã\n/status - Áõ£Ë¶ñÁä∂Ê≥Å„ÇíÁ¢∫Ë™ç\n/help - „Éò„É´„Éó„ÇíË°®Á§∫\n\n„Åæ„Åö„ÅØ /add „Ç≥„Éû„É≥„Éâ„ÅßÁõ£Ë¶ñ„Åó„Åü„ÅÑÁâ©‰ª∂URL„ÇíÁôªÈå≤„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ\n    `.trim();\n\n    return message;\n  }\n\n  /**\n   * Telegram„É¶„Éº„Ç∂„Éº„Éá„Éº„Çø„ÅÆÊ§úË®º\n   */\n  private validateTelegramUser(telegramUser: TelegramUser): void {\n    if (!telegramUser.id) {\n      throw new InvalidTelegramDataException('Telegram user ID is required');\n    }\n\n    if (\n      !telegramUser.first_name ||\n      telegramUser.first_name.trim().length === 0\n    ) {\n      throw new InvalidTelegramDataException(\n        'Telegram user first name is required',\n      );\n    }\n\n    // ÂêçÂâç„ÅÆÈï∑„ÅïÂà∂Èôê\n    if (telegramUser.first_name.length > 255) {\n      throw new InvalidTelegramDataException('First name is too long');\n    }\n\n    if (telegramUser.last_name && telegramUser.last_name.length > 255) {\n      throw new InvalidTelegramDataException('Last name is too long');\n    }\n\n    if (telegramUser.username && telegramUser.username.length > 255) {\n      throw new InvalidTelegramDataException('Username is too long');\n    }\n  }\n\n  /**\n   * „É¶„Éº„Ç∂„Éº„Åå„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Åã„ÉÅ„Çß„ÉÉ„ÇØ\n   */\n  async validateUser(telegramId: string): Promise<boolean> {\n    try {\n      const user = await this.usersService.findByTelegramId(telegramId);\n      return user?.isActive ?? false;\n    } catch (error) {\n      this.logger.error(\n        `User validation failed for ${telegramId}: ${error instanceof Error ? error.message : String(error)}`,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæóÔºàË™çË®ºÊ∏à„ÅøÂâçÊèêÔºâ\n   */\n  async getUser(telegramId: string): Promise<User | null> {\n    try {\n      return await this.usersService.findByTelegramId(telegramId);\n    } catch (error) {\n      this.logger.error(\n        `Failed to get user ${telegramId}: ${error instanceof Error ? error.message : String(error)}`,\n      );\n      return null;\n    }\n  }\n}\n"],"version":3}