name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, first-commit]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint:check

      - name: Run tests
        run: npm run test

      - name: Check test coverage
        run: npm run test:coverage
        continue-on-error: true

      - name: Build application
        run: npm run build

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '20.x'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t sokubutsu-mvp:latest .

      - name: Test Docker image
        run: |
          docker run --rm -e TELEGRAM_BOT_TOKEN=test -e TELEGRAM_CHAT_ID=test \
            sokubutsu-mvp:latest node -e "console.log('Docker image test successful')"

  quality-gate:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Quality check
        run: npm run quality:check

      - name: Check for security vulnerabilities
        run: npm audit --audit-level=moderate
