name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*, fix/*, refactor/*]
  pull_request:
    branches: [main, develop]

env:
  NODE_ENV: test
  DATABASE_URL: file:./test.db
  JEST_WORKERS: 1
  CI: true

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Debug Environment
        run: |
          echo "=== Debug Information ==="
          echo "Node.js version: $(node --version)"
          echo "npm version: $(npm --version)"
          echo "Working directory: $(pwd)"
          echo "Environment variables:"
          env | grep -E "(NODE_ENV|CI|DATABASE_URL|JEST)" || echo "No relevant env vars"
          echo "=== Package.json scripts ==="
          cat package.json | grep -A20 '"scripts"' || echo "No scripts found"
          echo "=== ESLint version ==="
          npx eslint --version || echo "ESLint not found"
          echo "=== TypeScript version ==="
          npx tsc --version || echo "TypeScript not found"
          echo "=== Jest version ==="
          npx jest --version || echo "Jest not found"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: |
          echo "🔍 ESLintチェック実行中..."
          echo "実行コマンド: npm run ci:lint"
          npm run ci:lint 2>&1 | tee eslint-output.log
          ESLINT_EXIT_CODE=${PIPESTATUS[0]}

          if [ $ESLINT_EXIT_CODE -ne 0 ]; then
            echo "❌ ESLintエラーが発生しました (exit code: $ESLINT_EXIT_CODE)"
            echo "=== ESLint出力詳細 ==="
            cat eslint-output.log
            echo "=== エラーサマリー ==="
            grep -E "error|Error" eslint-output.log || echo "エラー詳細が見つかりません"
            exit 1
          fi
          echo "✅ ESLintチェック成功"

      - name: Run TypeScript check
        run: |
          echo "🔧 TypeScriptチェック実行中..."
          echo "実行コマンド: npm run ci:typecheck"
          npm run ci:typecheck 2>&1 | tee typescript-output.log
          TS_EXIT_CODE=${PIPESTATUS[0]}

          if [ $TS_EXIT_CODE -ne 0 ]; then
            echo "❌ TypeScriptエラーが発生しました (exit code: $TS_EXIT_CODE)"
            echo "=== TypeScript出力詳細 ==="
            cat typescript-output.log
            exit 1
          fi
          echo "✅ TypeScriptチェック成功"

      - name: Run tests
        run: |
          echo "🧪 テスト実行中..."
          echo "実行コマンド: npm run ci:test"
          npm run ci:test 2>&1 | tee test-output.log
          TEST_EXIT_CODE=${PIPESTATUS[0]}

          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "❌ テストが失敗しました (exit code: $TEST_EXIT_CODE)"
            echo "=== テスト出力詳細 ==="
            cat test-output.log
            echo "=== エラーサマリー ==="
            grep -E "FAIL|Error|error" test-output.log || echo "エラー詳細が見つかりません"
            exit 1
          fi
          echo "✅ テスト成功"

      - name: Run test coverage
        run: |
          echo "📊 カバレッジ測定中..."
          npm run ci:test -- --coverage
          # CI/CDではカバレッジエラーは警告として扱う

      - name: Build application
        run: |
          echo "🔨 ビルド実行中..."
          npm run ci:build

      - name: Quality Gate
        run: |
          echo "🚪 品質ゲートチェック"
          # ESLintエラー数をチェック
          ERROR_COUNT=$(npm run ci:lint 2>&1 | grep -E "^\s*[0-9]+:[0-9]+\s+error" | wc -l | tr -d ' ')
          WARNING_COUNT=$(npm run ci:lint 2>&1 | grep -E "^\s*[0-9]+:[0-9]+\s+warning" | wc -l | tr -d ' ')
          TOTAL_ISSUES=$((ERROR_COUNT + WARNING_COUNT))

          echo "ESLintエラー: $ERROR_COUNT個"
          echo "ESLint警告: $WARNING_COUNT個"
          echo "合計問題数: $TOTAL_ISSUES個"

          # エラーが1つでもあれば失敗
          if [ "$ERROR_COUNT" -gt 0 ]; then
            echo "❌ ESLintエラーが存在します"
            exit 1
          fi

          # 警告が多すぎる場合も失敗（段階的に厳格化）
          if [ "$WARNING_COUNT" -gt 320 ]; then
            echo "❌ ESLint警告が多すぎます（上限: 320個）"
            exit 1
          fi

          echo "✅ 品質ゲート通過"

  security-scan:
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          echo "🔒 セキュリティ監査実行中..."
          npm audit --audit-level moderate
          # || true を削除 - 脆弱性があれば失敗

      - name: Check for sensitive data
        run: |
          echo "🔍 機密情報チェック中..."
          # .envファイルがコミットされていないか確認
          if [ -f ".env" ]; then
            echo "❌ .envファイルが検出されました！"
            exit 1
          fi
          # APIキーやトークンが露出していないか確認
          # 実際のハードコードされた値のみを検出（変数名や環境変数参照は除外）
          if grep -rE "(api_key|apikey|api-key|token|secret|password)\s*[:=]\s*['\"][^'\"]+['\"]" --include="*.ts" --include="*.js" --exclude-dir=node_modules . | \
             grep -v "// " | \
             grep -v "* " | \
             grep -v "\.spec\." | \
             grep -v "test-" | \
             grep -v "dummy" | \
             grep -v "mock" | \
             grep -v "example" | \
             grep -v "placeholder" | \
             grep -v "YOUR_" | \
             grep -v "<.*>"; then
            echo "❌ 潜在的な機密情報が検出されました"
            echo "ヒント: 環境変数やConfigServiceを使用してください"
            exit 1
          fi
          echo "✅ 機密情報チェック完了"

  docker-check:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Dockerfile
        run: |
          echo "🐳 Dockerfileチェック中..."
          if [ -f "Dockerfile" ]; then
            echo "✅ Dockerfileが存在します"
            # Dockerfileの構文チェック
            docker run --rm -i hadolint/hadolint < Dockerfile
            # || true を削除 - 問題があれば失敗
          else
            echo "⚠️ Dockerfileが見つかりません"
          fi

      - name: Check docker-compose.yml
        run: |
          echo "🐳 docker-compose.ymlチェック中..."
          if [ -f "docker-compose.yml" ]; then
            echo "✅ docker-compose.ymlが存在します"
            # docker-composeの構文チェック
            docker compose config --quiet
            # || true を削除 - 問題があれば失敗
          else
            echo "⚠️ docker-compose.ymlが見つかりません"
          fi

  quality-metrics-report:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Quality Report
        run: |
          echo "📊 品質メトリクスレポート"
          echo "========================"

          # ESLintメトリクス
          LINT_OUTPUT=$(npm run lint 2>&1 || true)
          ERROR_COUNT=$(echo "$LINT_OUTPUT" | grep -c "error" || echo "0")
          WARNING_COUNT=$(echo "$LINT_OUTPUT" | grep -c "warning" || echo "0")

          echo "ESLintエラー: $ERROR_COUNT個"
          echo "ESLint警告: $WARNING_COUNT個"

          # TypeScriptメトリクス
          TS_OUTPUT=$(npx tsc --noEmit 2>&1 || true)
          TS_ERRORS=$(echo "$TS_OUTPUT" | grep -c "error TS" || echo "0")

          echo "TypeScriptエラー: $TS_ERRORS個"

          # 品質基準判定
          echo ""
          echo "品質基準判定:"
          if [ "$ERROR_COUNT" -eq 0 ] && [ "$TS_ERRORS" -eq 0 ]; then
            echo "✅ エラーゼロ達成"
          else
            echo "❌ エラーが存在します"
          fi

          if [ "$WARNING_COUNT" -le 100 ]; then
            echo "✅ 警告数が許容範囲内"
          else
            echo "❌ 警告数が多すぎます"
          fi

  create-release:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan, docker-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate changelog
        id: changelog
        run: |
          echo "📝 変更履歴を生成中..."
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline -10)
          else
            COMMITS=$(git log --oneline $LAST_TAG..HEAD)
          fi
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        if: startsWith(github.event.head_commit.message, 'release:')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## 変更内容
            ${{ steps.changelog.outputs.commits }}

            ## 品質基準
            ✅ 全ての品質チェックに合格
            ✅ セキュリティ監査に合格
            ✅ ビルド成功
          draft: false
          prerelease: false
